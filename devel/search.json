[{"path":"https://pharmaverse.github.io/admiralonco/devel/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralonco/devel/LICENSE.html","id":"1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/LICENSE.html","id":"2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/LICENSE.html","id":"3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/LICENSE.html","id":"4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/LICENSE.html","id":"5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/LICENSE.html","id":"6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/LICENSE.html","id":"7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/LICENSE.html","id":"8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/LICENSE.html","id":"9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright 2021 F. Hoffmann-La Roche AG and GlaxoSmithKline LLC  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/admiralonco.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Get Started","text":"package extension, new admiral best place first start reading Get Started guide. extension package follows main idea conventions, re-uses many functions admiral, important thoroughly understand able use {admiralonco}.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/admiralonco.html","id":"derivations","dir":"Articles","previous_headings":"","what":"Derivations","title":"Get Started","text":"important functions {admiralonco} derivations. follow conventions admiral focused oncology-specific needs.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/admiralonco.html","id":"starting-a-script","dir":"Articles","previous_headings":"","what":"Starting a Script","title":"Get Started","text":"oncology ADaM data structures, overview flow example function calls common steps provided following vignettes: Creating ADRS Creating ADTTE {admiralonco} also provides template R scripts starting point. can created calling use_ad_template() {admiral}, e.g., list available templates can obtained list_all_templates() {admiral}:","code":"library(admiral) use_ad_template(   adam_name = \"adrs\",   save_path = \"./ad_adrs.R\",   package = \"admiralonco\" ) list_all_templates(package = \"admiralonco\") #> Existing ADaM templates in package 'admiralonco': #> • ADRS #> • ADTTE"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/admiralonco.html","id":"support","dir":"Articles","previous_headings":"","what":"Support","title":"Get Started","text":"Support provided via admiral Slack channel.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adrs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating ADRS","text":"article describes creating ADRS ADaM common oncology endpoint parameters based RECIST v1.1. Therefore response values expected either CR, PR, SD, NON-CR/NON-PD, PD NE. Examples currently presented tested using ADSL (ADaM) RS, TU (SDTM) inputs. However, domains used. functions workflow similarly used create intermediary ADEVENT ADaM. Note: examples assume CDISC SDTM /ADaM format input unless otherwise specified.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adrs.html","id":"programming-workflow","dir":"Articles","previous_headings":"","what":"Programming Workflow","title":"Creating ADRS","text":"Read Data Pre-processing Input Records Derive Progressive Disease Parameter Derive Response Parameter Derive Clinical Benefit Parameter Derive Best Overall Response Parameter Derive Best Overall Response CR/PR Parameter Derive Response Parameters requiring Confirmation Derive Parameters using Independent Review Facility (IRF) responses Derive Death Parameter Derive Last Disease Assessment Parameters Derive Measurable Disease Baseline Parameter Assign ASEQ Add ADSL variables","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adrs.html","id":"readdata","dir":"Articles","previous_headings":"Programming Workflow","what":"Read in Data","title":"Creating ADRS","text":"start, data frames needed creation ADRS read environment. company specific process. data frames needed may ADSL, RS TU. example purpose, SDTM ADaM datasets (based CDISC Pilot test data)—included {admiral.test}—used. step, may useful join ADSL RS domain. ADSL variables used derivations selected step. rest relevant ADSL added later.","code":"library(admiral) library(admiralonco) library(dplyr) library(admiral.test) library(lubridate) library(stringr) data(\"admiral_adsl\") data(\"admiral_rs\") data(\"admiral_tu\")  adsl <- admiral_adsl rs <- admiral_rs tu <- admiral_tu  rs <- convert_blanks_to_na(rs) tu <- convert_blanks_to_na(tu) adsl_vars <- vars(RANDDT) adrs <- derive_vars_merged(   rs,   dataset_add = adsl,   new_vars = adsl_vars,   by_vars = vars(STUDYID, USUBJID) )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adrs.html","id":"input","dir":"Articles","previous_headings":"Programming Workflow","what":"Pre-processing of Input Records","title":"Creating ADRS","text":"first step involves company-specific pre-processing records required input downstream parameter functions. Note needed multiple times (e.g. investigator Independent Review Facility (IRF) records). even involve merging input data sources besides RS, ADTR. step include required selection/derivation ADT applying necessary partial date imputations, updating AVAL (e.g. ordered best worst response), setting analysis flag ANL01FL. Common options ANL01FL set null invalid assessments occurring new anti-cancer therapy, flag assessments date first treatment/randomization, rules cover case patient multiple observations per visit (e.g. selecting worst value). Another consideration extra potential protocol-specific sources Progressive Disease radiological assessments, pre-processed create PD record feed downstream derivations. shows example possible company-specific implementation step.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adrs.html","id":"select-overall-response-records-and-set-parameter-details","dir":"Articles","previous_headings":"Programming Workflow > Pre-processing of Input Records","what":"Select Overall Response Records and Set Parameter Details","title":"Creating ADRS","text":"case use overall response records RS investigator starting point. parameter details PARAMCD, PARAM etc always company-specific, example shown can trace records feed parameter derivations.","code":"adrs <- adrs %>%   filter(RSEVAL == \"INVESTIGATOR\" & RSTESTCD == \"OVRLRESP\") %>%   mutate(     PARAMCD = \"OVR\",     PARAM = \"Overall Response by Investigator\",     PARCAT1 = \"Tumor Response\",     PARCAT2 = \"Investigator\",     PARCAT3 = \"Recist 1.1\"   )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adrs.html","id":"partial-date-imputation-and-deriving-adt-adtf-avisit-etc","dir":"Articles","previous_headings":"Programming Workflow > Pre-processing of Input Records","what":"Partial Date Imputation and Deriving ADT, ADTF, AVISIT etc","title":"Creating ADRS","text":"data collection allows partial dates, apply company-specific imputation rule stage deriving ADT. example, impute missing day last possible date.","code":"adrs <- adrs %>%   derive_vars_dt(     dtc = RSDTC,     new_vars_prefix = \"A\",     highest_imputation = \"D\",     date_imputation = \"last\"   ) %>%   mutate(AVISIT = VISIT)"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adrs.html","id":"derive-avalc-and-aval","dir":"Articles","previous_headings":"Programming Workflow > Pre-processing of Input Records","what":"Derive AVALC and AVAL","title":"Creating ADRS","text":"populate AVALC create numeric version AVAL (ordered best worst response). ordering already covered within RECIST v1.1 parameter derivation functions, changing AVAL change result derivations.","code":"adrs <- adrs %>%   mutate(     AVALC = RSSTRESC,     AVAL = aval_resp(AVALC)   )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adrs.html","id":"derive-anl01fl","dir":"Articles","previous_headings":"Programming Workflow > Pre-processing of Input Records","what":"Derive ANL01FL","title":"Creating ADRS","text":"deriving ANL01FL opportunity exclude records contribute downstream parameter derivations. example includes selecting valid assessments occurring randomization date. alternative example records occurring new anti-cancer therapy additionally excluded (NACTDT pre-derived first date new anti-cancer therapy). Note don’t filter records first PD stage, specifically catered {admiralonco} parameter derivation functions steps, via source_pd arguments. However, prefer rely source_pd arguments, user free filter records first PD stage similar way via ANLzzFL flag, leave source_pd null downstream parameter derivation function calls.","code":"adrs <- adrs %>%   mutate(     ANL01FL = case_when(       !is.na(AVAL) & ADT >= RANDDT ~ \"Y\",       TRUE ~ NA_character_     )   ) adrs <- adrs %>%   mutate(     ANL01FL = case_when(       !is.na(AVAL) & ADT >= RANDDT & ADT < NACTDT ~ \"Y\",       TRUE ~ NA_character_     )   )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adrs.html","id":"pd","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Progressive Disease Parameter","title":"Creating ADRS","text":"Now input records prepared company-specific requirements, can start derive new parameter records. parameter derivations, values except overwritten set_values_to argument kept earliest occurring input record fulfilling required criteria. function admiral::derive_param_first_event() can used find date first PD. progressive disease, response death parameters shown steps , examples show ADRS parameters, equally achieved via ADSL dates ADEVENT parameters. prefer store ADSL date, function admiral::derive_var_extreme_dt() used find date first PD variable, rather new parameter record. parameter derivation functions use dates flexible allow sourcing input source using admiral::date_source(). See examples .","code":"adrs <- adrs %>%   derive_param_first_event(     dataset_adsl = adsl,     dataset_source = adrs,     filter_source = PARAMCD == \"OVR\" & AVALC == \"PD\" & ANL01FL == \"Y\",     date_var = ADT,     set_values_to = vars(       PARAMCD = \"PD\",       PARAM = \"Disease Progression by Investigator\",       PARCAT1 = \"Tumor Response\",       PARCAT2 = \"Investigator\",       PARCAT3 = \"Recist 1.1\",       ANL01FL = \"Y\"     )   ) #> Joining, by = c(\"STUDYID\", \"USUBJID\")"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adrs.html","id":"rsp","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Response Parameter","title":"Creating ADRS","text":"next required step define source location newly derived PD date. equivalent example using ADSL instead follows (PDDT pre-derived first date progressive disease). function derive_param_response() can used find date first response. differs admiral::derive_param_first_event() function looks events occurring prior first PD. example, response condition defined CR PR.","code":"pd <- date_source(   dataset_name = \"adrs\",   date = ADT,   filter = PARAMCD == \"PD\" & AVALC == \"Y\" ) pd <- date_source(   dataset_name = \"adsl\",   date = PDDT ) adrs <- adrs %>%   derive_param_response(     dataset_adsl = adsl,     filter_source = PARAMCD == \"OVR\" & AVALC %in% c(\"CR\", \"PR\") & ANL01FL == \"Y\",     source_pd = pd,     source_datasets = list(adrs = adrs),     set_values_to = vars(       PARAMCD = \"RSP\",       PARAM = \"Response by Investigator (confirmation not required)\",       PARCAT1 = \"Tumor Response\",       PARCAT2 = \"Investigator\",       PARCAT3 = \"Recist 1.1\",       ANL01FL = \"Y\"     )   ) #> Joining, by = c(\"STUDYID\", \"USUBJID\")"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adrs.html","id":"cb","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Clinical Benefit Parameter","title":"Creating ADRS","text":"Similarly, now define source location newly derived first response date. function derive_param_clinbenefit() can used derive clinical benefit parameter, define patient response sustained period time first PD. also known disease control. example “sustained period” defined 42 days randomization date, using ref_start_window argument.","code":"resp <- date_source(   dataset_name = \"adrs\",   date = ADT,   filter = PARAMCD == \"RSP\" & AVALC == \"Y\" ) adrs <- adrs %>%   derive_param_clinbenefit(     dataset_adsl = adsl,     filter_source = PARAMCD == \"OVR\" & ANL01FL == \"Y\",     source_resp = resp,     source_pd = pd,     source_datasets = list(adrs = adrs),     reference_date = RANDDT,     ref_start_window = 42,     set_values_to = vars(       PARAMCD = \"CB\",       PARAM = \"Clinical Benefit by Investigator (confirmation for response not required)\",       PARCAT1 = \"Tumor Response\",       PARCAT2 = \"Investigator\",       PARCAT3 = \"Recist 1.1\",       ANL01FL = \"Y\"     )   )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adrs.html","id":"bor","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Best Overall Response Parameter","title":"Creating ADRS","text":"function derive_param_bor() can used derive best overall response (without confirmation required) parameter. Similar function can optionally decide period consider SD NON-CR/NON-PD eligible . example, 42 days randomization date used . Note gives pre-defined AVAL values : \"CR\" ~ 1, \"PR\" ~ 2, \"SD\" ~ 3, \"NON-CR/NON-PD\" ~ 4, \"PD\" ~ 5, \"NE\" ~ 6, \"MISSING\" ~ 7. ’d like provide company-specific ordering follows: add additional argument aval_fun = aval_resp_new derive_param_bor() call. aware impact AVAL mapping, derivation BOR way - function derivation relies AVALC .","code":"adrs <- adrs %>%   derive_param_bor(     dataset_adsl = adsl,     filter_source = PARAMCD == \"OVR\" & ANL01FL == \"Y\",     source_pd = pd,     source_datasets = list(adrs = adrs),     reference_date = RANDDT,     ref_start_window = 42,     set_values_to = vars(       PARAMCD = \"BOR\",       PARAM = \"Best Overall Response by Investigator (confirmation not required)\",       PARCAT1 = \"Tumor Response\",       PARCAT2 = \"Investigator\",       PARCAT3 = \"Recist 1.1\",       ANL01FL = \"Y\"     )   ) aval_resp_new <- function(arg) {   case_when(     arg == \"CR\" ~ 7,     arg == \"PR\" ~ 6,     arg == \"SD\" ~ 5,     arg == \"NON-CR/NON-PD\" ~ 4,     arg == \"PD\" ~ 3,     arg == \"NE\" ~ 2,     arg == \"MISSING\" ~ 1,     TRUE ~ NA_real_   ) }"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adrs.html","id":"bcp","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Best Overall Response of CR/PR Parameter","title":"Creating ADRS","text":"function derive_param_first_event() can used check patient response BOR.","code":"adrs <- adrs %>%   derive_param_first_event(     dataset_adsl = adsl,     dataset_source = adrs,     filter_source = PARAMCD == \"BOR\" & AVALC %in% c(\"CR\", \"PR\") & ANL01FL == \"Y\",     date_var = ADT,     set_values_to = vars(       PARAMCD = \"BCP\",       PARAM = \"Best Overall Response of CR/PR by Investigator (confirmation not required)\",       PARCAT1 = \"Tumor Response\",       PARCAT2 = \"Investigator\",       PARCAT3 = \"Recist 1.1\",       ANL01FL = \"Y\"     )   ) #> Joining, by = c(\"STUDYID\", \"USUBJID\")"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adrs.html","id":"confirm","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Response Parameters requiring Confirmation","title":"Creating ADRS","text":"response parameters can repeated “confirmed” responses . functions derive_param_confirmed_resp() derive_param_confirmed_bor() can used. functions can re-used passing confirmed response records. See examples derived parameters requiring confirmation. assessment confirmatory assessment need occur least 28 days apart (without +1 applied calculation days visits), using ref_confirm argument.","code":"adrs <- adrs %>%   derive_param_confirmed_resp(     dataset_adsl = adsl,     filter_source = PARAMCD == \"OVR\" & AVALC %in% c(\"CR\", \"PR\") & ANL01FL == \"Y\",     source_pd = pd,     source_datasets = list(adrs = adrs),     ref_confirm = 28,     set_values_to = vars(       PARAMCD = \"CRSP\",       PARAM = \"Confirmed Response by Investigator\",       PARCAT1 = \"Tumor Response\",       PARCAT2 = \"Investigator\",       PARCAT3 = \"Recist 1.1\",       ANL01FL = \"Y\"     )   )  confirmed_resp <- date_source(   dataset_name = \"adrs\",   date = ADT,   filter = PARAMCD == \"CRSP\" & AVALC == \"Y\" )  adrs <- adrs %>%   derive_param_clinbenefit(     dataset_adsl = adsl,     filter_source = PARAMCD == \"OVR\" & ANL01FL == \"Y\",     source_resp = confirmed_resp,     source_pd = pd,     source_datasets = list(adrs = adrs),     reference_date = RANDDT,     ref_start_window = 42,     set_values_to = vars(       PARAMCD = \"CCB\",       PARAM = \"Confirmed Clinical Benefit by Investigator\",       PARCAT1 = \"Tumor Response\",       PARCAT2 = \"Investigator\",       PARCAT3 = \"Recist 1.1\",       ANL01FL = \"Y\"     )   ) %>%   derive_param_confirmed_bor(     dataset_adsl = adsl,     filter_source = PARAMCD == \"OVR\" & ANL01FL == \"Y\",     source_pd = pd,     source_datasets = list(adrs = adrs),     reference_date = RANDDT,     ref_start_window = 42,     ref_confirm = 28,     set_values_to = vars(       PARAMCD = \"CBOR\",       PARAM = \"Best Confirmed Overall Response by Investigator\",       PARCAT1 = \"Tumor Response\",       PARCAT2 = \"Investigator\",       PARCAT3 = \"Recist 1.1\",       ANL01FL = \"Y\"     )   ) %>%   derive_param_first_event(     dataset_adsl = adsl,     dataset_source = adrs,     filter_source = PARAMCD == \"CBOR\" & AVALC %in% c(\"CR\", \"PR\") & ANL01FL == \"Y\",     date_var = ADT,     set_values_to = vars(       PARAMCD = \"CBCP\",       PARAM = \"Best Confirmed Overall Response of CR/PR by Investigator\",       PARCAT1 = \"Tumor Response\",       PARCAT2 = \"Investigator\",       PARCAT3 = \"Recist 1.1\",       ANL01FL = \"Y\"     )   ) #> Joining, by = c(\"STUDYID\", \"USUBJID\")"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adrs.html","id":"irf","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Parameters using Independent Review Facility (IRF) responses","title":"Creating ADRS","text":"steps can repeated different sets records, now using assessments Independent Review Facility instead investigator. just need replace first steps selecting required records, feed input downstream parameter functions. Remember new progressive disease response source object required passing source_pd source_resp respectively. calls parameter derivation functions replace PARAMCD == \"OVR\" source PARAMCD == \"OVRR1\".","code":"adrsirf <- rs %>%   filter(RSEVAL == \"INDEPENDENT ASSESSOR\" & RSEVALID == \"RADIOLOGIST 1\" & RSTESTCD == \"OVRLRESP\") %>%   mutate(     PARAMCD = \"OVRR1\",     PARAM = \"Overall Response by Radiologist 1\",     PARCAT1 = \"Tumor Response\",     PARCAT2 = \"Radiologist\",     PARCAT3 = \"Recist 1.1\"   )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adrs.html","id":"death","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Death Parameter","title":"Creating ADRS","text":"function admiral::derive_param_first_event() can used create new death parameter using death date ADSL. need restrict columns ADSL ’ll merge required variables later across ADRS records.","code":"adsldth <- adsl %>%   select(STUDYID, USUBJID, DTHDT, !!!adsl_vars)  adrs <- adrs %>%   derive_param_first_event(     dataset_adsl = adsldth,     dataset_source = adsldth,     filter_source = !is.na(DTHDT),     date_var = DTHDT,     set_values_to = vars(       PARAMCD = \"DEATH\",       PARAM = \"Death\",       PARCAT1 = \"Reference Event\",       ANL01FL = \"Y\"     )   ) %>%   select(-DTHDT) #> Joining, by = c(\"STUDYID\", \"USUBJID\")"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adrs.html","id":"lsta","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Last Disease Assessment Parameters","title":"Creating ADRS","text":"function derive_param_lasta() can used create parameter last disease assessment. flexibility use source_pd argument look first PD assessment, example assessments included.","code":"adrs <- adrs %>%   derive_param_lasta(     filter_source = PARAMCD == \"OVR\" & ANL01FL == \"Y\",     set_values_to = vars(       PARAMCD = \"LSTA\",       PARAM = \"Last Disease Assessment by Investigator\",       PARCAT1 = \"Tumor Response\",       PARCAT2 = \"Investigator\",       PARCAT3 = \"Recist 1.1\",       ANL01FL = \"Y\"     )   )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adrs.html","id":"mdis","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Measurable Disease at Baseline Parameter","title":"Creating ADRS","text":"function admiral::derive_param_exist_flag() can used check whether patient measurable disease baseline, according company-specific condition. example check TU target lesions baseline visit. need restrict columns ADSL ’ll merge required variables later across ADRS records.","code":"adslmdis <- adsl %>%   select(STUDYID, USUBJID, !!!adsl_vars)  adrs <- adrs %>%   derive_param_exist_flag(     dataset_adsl = adslmdis,     dataset_add = tu,     condition = TUEVAL == \"INVESTIGATOR\" & TUSTRESC == \"TARGET\" & VISIT == \"BASELINE\",     false_value = \"N\",     missing_value = \"N\",     set_values_to = vars(       PARAMCD = \"MDIS\",       PARAM = \"Measurable Disease at Baseline by Investigator\",       PARCAT2 = \"Investigator\",       PARCAT3 = \"Recist 1.1\",       ANL01FL = \"Y\"     )   )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adrs.html","id":"aseq","dir":"Articles","previous_headings":"Programming Workflow","what":"Assign ASEQ","title":"Creating ADRS","text":"function admiral::derive_var_obs_number() can used derive ASEQ. example call :","code":"adrs <- adrs %>%   derive_var_obs_number(     by_vars = vars(STUDYID, USUBJID),     order = vars(PARAMCD, ADT, VISITNUM, RSSEQ),     check_type = \"error\"   )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adrs.html","id":"adsl_vars","dir":"Articles","previous_headings":"Programming Workflow","what":"Add ADSL variables","title":"Creating ADRS","text":"needed, ADSL variables can now added. List ADSL variables already merged held vector adsl_vars.","code":"adrs <- adrs %>%   derive_vars_merged(     dataset_add = select(adsl, !!!negate_vars(adsl_vars)),     by_vars = vars(STUDYID, USUBJID)   )"},{"path":[]},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adtte.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating ADTTE","text":"article describes creating ADTTE (time--event) ADaM common oncology endpoint parameters. main part programming time--event dataset definition events censoring times. admiral/{admiralonco} supports single events like death (Overall Survival) composite events like disease progression death (Progression Free Survival). one source dataset can used definition event censoring times. majority functions used exist admiral, except tte_sources helper object, provided example {admiralonco}. practice, company create version , likely exact specifications filtering condition description metadata vary. Note: examples assume CDISC SDTM /ADaM format input unless otherwise specified.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adtte.html","id":"required-packages","dir":"Articles","previous_headings":"Introduction","what":"Required Packages","title":"Creating ADTTE","text":"examples vignette require following packages.","code":"library(admiral) library(admiralonco) library(dplyr) library(admiral.test) library(lubridate)"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adtte.html","id":"programming-workflow","dir":"Articles","previous_headings":"","what":"Programming Workflow","title":"Creating ADTTE","text":"Read Data Derive Parameters (CNSR, ADT, STARTDT) Derive Analysis Value (AVAL) Derive Analysis Sequence Number (ASEQ) Add ADSL Variables","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adtte.html","id":"readdata","dir":"Articles","previous_headings":"Programming Workflow","what":"Read in Data","title":"Creating ADTTE","text":"start, datasets needed creation time--event dataset read environment. company specific process. example purpose, ADaM datasets—included admiral {admiralonco}—used. alternative might use ADEVENT input.","code":"data(\"admiral_adsl\") data(\"admiral_adrs\") adsl <- admiral_adsl adrs <- admiral_adrs"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adtte.html","id":"parameters","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Parameters (CNSR, ADT, STARTDT)","title":"Creating ADTTE","text":"derive parameter dependent variables like CNSR, ADT, STARTDT, EVNTDESC, SRCDOM, PARAMCD, … admiral::derive_param_tte() function can used. adds one parameter input dataset one observation per subject. Usually called several times. subject determined event occurred. affirmative analysis date ADT set earliest event date. event occurred, analysis date set latest censoring date. events censorings defined admiral::event_source() admiral::censor_source() class respectively. defines observations (filter parameter) source dataset (dataset_name parameter) potential events censorings, value CNSR variable (censor parameter), variable provides date (date parameter). date can provided date (--DT variable), datetime (--DTM variable), character ISO-8601 date (--DTC variable). CDISC strongly recommends CNSR = 0 events positive integers censorings. admiral/{admiralonco} enforce recommendation. Therefore censor parameter available admiral::censor_source() . defaulted 1. dataset_name parameter expects character value used identifier. actual data used derivation parameter provided via source_datasets parameter admiral::derive_param_tte(). expects named list datasets. names correspond identifiers specified dataset_name parameter. allows define events censoring independent data.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adtte.html","id":"pre-defined-time-to-event-source-objects","dir":"Articles","previous_headings":"Programming Workflow > Derive Parameters (CNSR, ADT, STARTDT)","what":"Pre-Defined Time-to-Event Source Objects","title":"Creating ADTTE","text":"table shows pre-defined tte_source objects cover common oncology use cases. mentioned introduction, company create version required filtering conditions metadata per company approach. example possible different approach follows, death sourced ADSL, instead ADRS, given EVNTDESC different. optional step stage required enable derivation duration response: using ADRS / ADEVENT parameters input response dates (instead variable ADSL) need use admiral::derive_vars_merged() add response date temporary variable (e.g. TEMP_RESPDT) able feed admiral::derive_param_tte() start date. also need use filter input datasets derive records responders. also repeated needed IRF confirmed responses. example code needed. pre-defined objects can passed directly admiral::derive_param_tte() create new time--event parameter. shows example calls Overall Survival (OS), Progression Free Survival (PFS), duration response (, derived responder patients filter source datasets). Note reason including randomization date censor catch patients never tumor assessment.","code":"adsl_death_event <- event_source(   dataset_name = \"adsl\",   date = DTHDT,   set_values_to = vars(     EVNTDESC = \"STUDY DEATH\",     SRCDOM = \"ADSL\",     SRCVAR = \"DTHDT\"   ) ) adsl <- adsl %>%   derive_vars_merged(     dataset_add = adrs,     filter_add = PARAMCD == \"RSP\" & AVALC == \"Y\" & ANL01FL == \"Y\",     by_vars = vars(STUDYID, USUBJID),     new_vars = vars(TEMP_RESPDT = ADT)   )  adrs <- adrs %>%   derive_vars_merged(     dataset_add = adsl,     by_vars = vars(STUDYID, USUBJID),     new_vars = vars(TEMP_RESPDT)   ) adtte <- derive_param_tte(   dataset_adsl = adsl,   start_date = RANDDT,   event_conditions = list(death_event),   censor_conditions = list(lastalive_censor, rand_censor),   source_datasets = list(adsl = adsl, adrs = adrs),   set_values_to = vars(PARAMCD = \"OS\", PARAM = \"Overall Survival\") ) %>%   derive_param_tte(     dataset_adsl = adsl,     start_date = RANDDT,     event_conditions = list(pd_event, death_event),     censor_conditions = list(lasta_censor, rand_censor),     source_datasets = list(adsl = adsl, adrs = adrs),     set_values_to = vars(PARAMCD = \"PFS\", PARAM = \"Progression Free Survival\")   ) %>%   derive_param_tte(     dataset_adsl = adsl,     start_date = TEMP_RESPDT,     event_conditions = list(pd_event, death_event),     censor_conditions = list(lasta_censor),     source_datasets = list(adsl = filter(adsl, !is.na(TEMP_RESPDT)), adrs = filter(adrs, !is.na(TEMP_RESPDT))),     set_values_to = vars(PARAMCD = \"RSD\", PARAM = \"Duration of Response\")   )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adtte.html","id":"creating-your-own-time-to-event-source-objects","dir":"Articles","previous_headings":"Programming Workflow > Derive Parameters (CNSR, ADT, STARTDT)","what":"Creating Your Own Time-to-Event Source Objects","title":"Creating ADTTE","text":"advise consult admiral “Creating BDS Time--Event ADaM” vignette guidance different options available examples. One extra common oncology case include around PFS censoring new anti-cancer therapy. either controlled using ANLzzFL explained ADRS vignette, records new anti-cancer therapy never contribute PD DEATH parameters. alternatively can control ADTTE side filtering records used admiral::event_source() admiral::censor_source(), e.g. PD death event date can use filter argument exclude events occurring new anti-cancer therapy. censor set whichever date analysis requires, e.g. date last tumor assessment prior new anti-cancer therapy last radiological assessment. pass multiple censor dates remember function choose latest occurring , cautious feeding say one censor date last assessment prior new anti-cancer therapy one last assessment - function choose maximum case incorrect. easiest solution pass one censor date date last assessment prior new anti-cancer therapy date last assessment new anti-cancer therapy. wanted use different censor dates different CNSDTDSC values, ’d need ensure one set per patient. case demonstrated example (NACTDT pre-derived first date new anti-cancer therapy, LASTANDT single tumor assessment censor date described ).","code":"pd_nact_event <- event_source(   dataset_name = \"adsl\",   filter = PDDT < NACTDT | is.na(NACTDT),   date = PDDT,   set_values_to = vars(     EVNTDESC = \"Disease Progression prior to NACT\",     SRCDOM = \"ADSL\",     SRCVAR = \"PDDT\"   ) )  death_nact_event <- event_source(   dataset_name = \"adsl\",   filter = DTHDT < NACTDT | is.na(NACTDT),   date = DTHDT,   set_values_to = vars(     EVNTDESC = \"Death prior to NACT\",     SRCDOM = \"ADSL\",     SRCVAR = \"DTHDT\"   ) )  lasta_nact_censor <- censor_source(   dataset_name = \"adsl\",   date = LASTANDT,   set_values_to = vars(     EVNTDESC = \"Last Tumor Assessment prior to NACT\",     CNSDTDSC = \"Last Tumor Assessment prior to NACT\",     SRCDOM = \"ADSL\",     SRCVAR = \"LASTANDT\"   ) )  adtte <- derive_param_tte(   dataset_adsl = adsl,   start_date = RANDDT,   event_conditions = list(pd_nact_event, death_nact_event),   censor_conditions = list(lasta_nact_censor, rand_censor),   source_datasets = list(adsl = adsl),   set_values_to = vars(PARAMCD = \"PFSNACT\", PARAM = \"Progression Free Survival prior to NACT\") )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adtte.html","id":"aval","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Analysis Value (AVAL)","title":"Creating ADTTE","text":"analysis value (AVAL) can derived calling admiral::derive_vars_duration(). example derives time event days. time units, months commonly see oncology analyses, can requested specifying out_unit parameter. See example . Note underlying lubridate::time_length() function used may perform slightly differently expectations, e.g. time_length(ymd(\"2021-01-01\") %--% ymd(\"2021-02-01\"), \"month\") time_length(ymd(\"2021-02-01\") %--% ymd(\"2021-03-01\"), \"month\") results exactly 1 month, logical approach gives different result convention assuming every month exactly equal days just using /30.4375 convention. difference noticed small durations, user prefers alternative approach calculate default days add extra processing convert months company-specific convention.","code":"adtte <- adtte %>%   derive_vars_duration(     new_var = AVAL,     start_date = STARTDT,     end_date = ADT   ) adtte_months <- adtte %>%   derive_vars_duration(     new_var = AVAL,     start_date = STARTDT,     end_date = ADT,     out_unit = \"months\"   )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adtte.html","id":"aseq","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Analysis Sequence Number (ASEQ)","title":"Creating ADTTE","text":"admiral function admiral::derive_var_obs_number() can used derive ASEQ:","code":"adtte <- adtte %>%   derive_var_obs_number(     by_vars = vars(STUDYID, USUBJID),     order = vars(PARAMCD),     check_type = \"error\"   )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/articles/adtte.html","id":"adslvars","dir":"Articles","previous_headings":"Programming Workflow","what":"Add ADSL Variables","title":"Creating ADTTE","text":"Variables ADSL required time--event analyses, e.g., treatment variables covariates can added using admiral::derive_vars_merged().","code":"adtte <- adtte %>%   derive_vars_merged(     dataset_add = adsl,     new_vars = vars(ARMCD, ARM, ACTARMCD, ACTARM, AGE, SEX),     by_vars = vars(STUDYID, USUBJID)   )"},{"path":[]},{"path":"https://pharmaverse.github.io/admiralonco/devel/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefan Bundfuss. Author, maintainer. Ross Farrugia. Author. Amit Jain. Author. Andrew Smith. Author. Teckla Akinyi. Author. Samia Kabi. Author. Stephen Gormley. Author. Karl Kennedy. Contributor. Matt Marino. Contributor. Gopi Vegesna. Contributor. F. Hoffmann-La Roche AG. Copyright holder, funder. GlaxoSmithKline LLC. Copyright holder, funder. Amgen Inc.. Copyright holder, funder.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bundfuss S, Farrugia R, Jain , Smith , Akinyi T, Kabi S, Gormley S (2022). admiralonco: Oncology Extension Package ADaM R Asset Library. R package version 0.1.0.","code":"@Manual{,   title = {admiralonco: Oncology Extension Package for ADaM in R Asset Library},   author = {Stefan Bundfuss and Ross Farrugia and Amit Jain and Andrew Smith and Teckla Akinyi and Samia Kabi and Stephen Gormley},   year = {2022},   note = {R package version 0.1.0}, }"},{"path":"https://pharmaverse.github.io/admiralonco/devel/index.html","id":"admiralonco","dir":"","previous_headings":"","what":"Oncology Extension Package for ADaM in R Asset Library","title":"Oncology Extension Package for ADaM in R Asset Library","text":"Oncology extension package ADaM R Asset Library admiral","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/index.html","id":"purpose","dir":"","previous_headings":"","what":"Purpose","title":"Oncology Extension Package for ADaM in R Asset Library","text":"provide complementary (admiral) toolbox enables develop oncology disease area specifics.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/index.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Oncology Extension Package for ADaM in R Asset Library","text":"Build toolbox re-usable functions utilities create oncology-specific ADaM datasets R modular manner. functions created based upon ADaM Implementation Guide aim facilitate programming ADaM dataset standards. Initially package focus common efficacy endpoint needs solid tumor (using RECIST v1.1 response criteria), time look add extra areas : endpoints targeted indications, baseline disease characteristics, common sensitivity analyses questionnaires.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/index.html","id":"expectations","dir":"","previous_headings":"","what":"Expectations","title":"Oncology Extension Package for ADaM in R Asset Library","text":"{admiralonco} expected complement admiral provide functions help creation efficacy endpoints required oncology ADaMs.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/index.html","id":"references-and-documentation","dir":"","previous_headings":"","what":"References and Documentation","title":"Oncology Extension Package for ADaM in R Asset Library","text":"Please refer {admiral} References Documentation","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/index.html","id":"r-versions","dir":"","previous_headings":"","what":"R Versions","title":"Oncology Extension Package for ADaM in R Asset Library","text":"’s summary strategy package related R versions: R versions developers users follow admiral core package. development devel branch admiral core used dependency. releasing new {admiralonco} version must run using latest released admiral core version, .e., main branch admiral core.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Oncology Extension Package for ADaM in R Asset Library","text":"use following support communications user developer community: Slack - informal discussions, Q&building user community. don’t access, use link join pharmaverse Slack workspace GitHub Issues - direct feedback, enhancement requests raising bugs","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/admiral_adrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Response Analysis Dataset — admiral_adrs","title":"Response Analysis Dataset — admiral_adrs","text":"example response analysis dataset","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/admiral_adrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Response Analysis Dataset — admiral_adrs","text":"","code":"admiral_adrs"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/admiral_adrs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Response Analysis Dataset — admiral_adrs","text":"object class tbl_df (inherits tbl, data.frame) 3274 rows 80 columns.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/admiral_adrs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Response Analysis Dataset — admiral_adrs","text":"Derived adsl, rs tu datasets using {admiralonco} (https://github.com/pharmaverse/admiralonco/blob/main/inst/templates/ad_adrs.R)","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/admiralonco-package.html","id":null,"dir":"Reference","previous_headings":"","what":"admiralonco: Oncology Extension Package for ADaM in R Asset Library — admiralonco-package","title":"admiralonco: Oncology Extension Package for ADaM in R Asset Library — admiralonco-package","text":"toolbox programming oncology specific Clinical Data Standards Interchange Consortium (CDISC) compliant Analysis Data Model (ADaM) datasets R. ADaM datasets mandatory part New Drug Biologics License Application submitted United States Food Drug Administration (FDA). Analysis derivations implemented accordance \"Analysis Data Model Implementation Guide\" (CDISC Analysis Data Model Team, 2021, https://www.cdisc.org/standards/foundational/adam/adamig-v1-3-release-package). package extension package admiral package.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/admiralonco-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"admiralonco: Oncology Extension Package for ADaM in R Asset Library — admiralonco-package","text":"Maintainer: Stefan Bundfuss stefan.bundfuss@roche.com Authors: Ross Farrugia Amit Jain Andrew Smith Teckla Akinyi Samia Kabi Stephen Gormley contributors: Karl Kennedy [contributor] Matt Marino [contributor] Gopi Vegesna [contributor] F. Hoffmann-La Roche AG [copyright holder, funder] GlaxoSmithKline LLC [copyright holder, funder] Amgen Inc. [copyright holder, funder]","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/aval_resp.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Character Response Values to Numeric Values — aval_resp","title":"Map Character Response Values to Numeric Values — aval_resp","text":"Map character response values like \"PR\" \"SD\" numeric values.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/aval_resp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Character Response Values to Numeric Values — aval_resp","text":"","code":"aval_resp(arg)"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/aval_resp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Character Response Values to Numeric Values — aval_resp","text":"arg Character vector","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/aval_resp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Character Response Values to Numeric Values — aval_resp","text":"1 arg equals \"CR\", 2 arg equals \"PR\", 3 arg equals \"SD\", 4 arg equals \"NON-CR/NON-PD\", 5 arg equals \"PD\", 6 arg equals \"NE\", 7 arg equals \"MISSING\", NA_real_ otherwise","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/aval_resp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Map Character Response Values to Numeric Values — aval_resp","text":"Stefan Bundfuss","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/aval_resp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Character Response Values to Numeric Values — aval_resp","text":"","code":"aval_resp(c(\"CR\", \"PR\", \"SD\", \"NON-CR/NON-PD\", \"PD\", \"NE\", \"MISSING\", \"ND\", NA_character_)) #> [1]  1  2  3  4  5  6  7 NA NA"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_bor.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a Parameter for Best Overall Response (without confirmation) — derive_param_bor","title":"Adds a Parameter for Best Overall Response (without confirmation) — derive_param_bor","text":"Adds parameter best overall response, without confirmation, optionally first progressive disease","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_bor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a Parameter for Best Overall Response (without confirmation) — derive_param_bor","text":"","code":"derive_param_bor(   dataset,   dataset_adsl,   filter_source,   source_pd = NULL,   source_datasets = NULL,   reference_date,   ref_start_window,   missing_as_ne = FALSE,   aval_fun = aval_resp,   subject_keys = vars(STUDYID, USUBJID),   set_values_to )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_bor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a Parameter for Best Overall Response (without confirmation) — derive_param_bor","text":"dataset input dataframe Best Overall Response derived added . columns PARAMCD, ADT, AVALCand columns specified subject_keys reference_date expected. Permitted Values: data.frame() object Required Optional: Required dataset_adsl ADSL input dataframe columns specified subject_keys expected. Permitted Values: data.frame() object Required Optional: Required filter_source Filter applied dataset derive Best Overall Response Required Optional: Required source_pd Date first progressive disease (PD) parameter specified, observations input dataset deriving new parameter restricted observations specified date. Observations specified date included. subjects without first PD date observations take account. Permitted Values: date_source object (see date_source() details) Default: NULL Required Optional: Optional source_datasets Source dataframe used calculate first PD date named list dataframes expected (although BOR) one dataframe needed. links dataset_name source_pd existing dataframe. example source_pd = pd_date   actual response dataframe script myadrs, source_datasets = list(adrs = myadrs) specified. Required Optional: Optional reference_date Reference date reference date used along ref_start_window determine records occur ADT (see Details section information). Usually treatment start date (TRTSDT) randomization date (RANDDT). Permitted Values: numeric date column Required Optional: Required ref_start_window Stable disease time window ref_start_window used along reference_date determine records occur ADT (.e. record determine whether ADT >= reference_date + ref_start_window), see Details section information. Permitted Values: non-negative numeric scalar Required Optional: Required missing_as_ne Consider assessments \"NE\"? argument set TRUE, response set \"NE\" subjects dataset_adsl without assessment dataset filter applied. Otherwise, response set \"MISSING\" subjects. Permitted Values: logical scalar Default: FALSE Required Optional: Required aval_fun Function map character analysis value (AVALC) numeric analysis value (AVAL) (first) argument function must expect character vector function must return numeric vector. Default: aval_resp (see aval_resp()) Required Optional: Required subject_keys Columns uniquely identify subject list symbols created using vars(). Permitted Values: vars object Default: vars(STUDYID, USUBJID) Required Optional: Required set_values_to New columns set named list returned vars() defining columns set new parameter, e.g. vars(PARAMCD = \"BOR\", PARAM = \"Best Overall Response\") expected. values must symbols, character strings, numeric values, NA. Required Optional: Required","code":"pd_date <- date_source(   dataset_name = \"adrs\",   date = ADT,   filter = PARAMCD == PD )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_bor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a Parameter for Best Overall Response (without confirmation) — derive_param_bor","text":"dataframe passed dataset argument additional columns /rows set set_values_to argument.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_bor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a Parameter for Best Overall Response (without confirmation) — derive_param_bor","text":"Calculates best overall response (BOR) parameter, detailed . Records PD can removed using source_pd source_datasets arguments. Note: CR, PR PD response records considered Best Overall Response. SD NON-CR/NON-PD records ADT >= reference_date + ref_start_window also considered Best Overall Response. Subjects SD NON-CR/NON-PD records ADT < reference_date + ref_start_window assigned Best Overall Response NE. Best Response, records steps 1 3, selected following order preference: CR, PR, SD, NON-CR/NON-PD, PD, NE, MISSING AVAL column added set using aval_fun(AVALC) function columns specified set_values_to parameter records added dataframe passed dataset argument Also Note: columns input dataset kept. subjects records input dataset (filter applied) columns kept ADSL also input dataset.  Columns populated new parameter populated differently (e.g. RSSTRESC, VISIT, PARCATy, ANLzzFL, ...) overwritten using set_values_to parameter.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_bor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adds a Parameter for Best Overall Response (without confirmation) — derive_param_bor","text":"Stephen Gormley","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_bor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a Parameter for Best Overall Response (without confirmation) — derive_param_bor","text":"","code":"library(magrittr) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(tibble) library(lubridate) #>  #> Attaching package: ‘lubridate’ #> The following object is masked from ‘package:base’: #>  #>     date library(admiral) #>  #> Attaching package: ‘admiral’ #> The following object is masked from ‘package:dplyr’: #>  #>     filter_if #> The following objects are masked from ‘package:admiralonco’: #>  #>     death_event, lastalive_censor  # Create ADSL dataset adsl <- tribble(   ~USUBJID, ~TRTSDTC,   \"1\",      \"2020-01-01\",   \"2\",      \"2019-12-12\",   \"3\",      \"2019-11-11\",   \"4\",      \"2019-12-30\",   \"5\",      \"2020-01-01\",   \"6\",      \"2020-02-02\",   \"7\",      \"2020-02-02\",   \"8\",      \"2020-04-01\" ) %>%   mutate(     TRTSDT = ymd(TRTSDTC),     STUDYID = \"XX1234\"   )  # Create ADRS dataset ovr_obs <- tribble(   ~USUBJID, ~ADTC, ~AVALC, ~ANL01FL,   \"1\", \"2020-01-01\", \"PR\", \"Y\",   \"1\", \"2020-02-01\", \"CR\", \"Y\",   \"1\", \"2020-02-16\", \"NE\", \"Y\",   \"1\", \"2020-03-01\", \"CR\", \"Y\",   \"1\", \"2020-04-01\", \"SD\", \"Y\",   \"2\", \"2020-01-01\", \"SD\", \"Y\",   \"2\", \"2020-02-01\", \"PR\", \"Y\",   \"2\", \"2020-03-01\", \"SD\", \"Y\",   \"2\", \"2020-03-13\", \"CR\", \"Y\",   \"3\", \"2019-11-12\", \"CR\", \"Y\",   \"3\", \"2019-12-02\", \"CR\", \"Y\",   \"3\", \"2020-01-01\", \"SD\", \"Y\",   \"4\", \"2020-01-01\", \"PR\", \"Y\",   \"4\", \"2020-03-01\", \"SD\", \"N\",   \"4\", \"2020-04-01\", \"SD\", \"Y\",   \"4\", \"2020-05-01\", \"PR\", \"Y\",   \"4\", \"2020-05-15\", \"NON-CR/NON-PD\", \"Y\",   \"5\", \"2020-01-01\", \"PR\", \"Y\",   \"5\", \"2020-01-10\", \"SD\", \"Y\",   \"5\", \"2020-01-20\", \"PR\", \"Y\",   \"5\", \"2020-05-15\", \"NON-CR/NON-PD\", \"Y\",   \"6\", \"2020-02-06\", \"PR\", \"Y\",   \"6\", \"2020-02-16\", \"CR\", \"Y\",   \"6\", \"2020-03-30\", \"PR\", \"Y\",   \"6\", \"2020-04-12\", \"PD\", \"Y\",   \"6\", \"2020-05-01\", \"CR\", \"Y\",   \"6\", \"2020-06-01\", \"CR\", \"Y\",   \"7\", \"2020-02-06\", \"PR\", \"Y\",   \"7\", \"2020-02-16\", \"CR\", \"Y\",   \"7\", \"2020-04-01\", \"NE\", \"N\" ) %>%   mutate(PARAMCD = \"OVR\")  pd_obs <-   bind_rows(tribble(     ~USUBJID, ~ADTC,        ~AVALC,     \"2\",      \"2020-03-01\", \"Y\",     \"4\",      \"2020-02-01\", \"Y\"   ) %>%     mutate(PARAMCD = \"PD\"))  adrs <- bind_rows(ovr_obs, pd_obs) %>%   mutate(     ADT = ymd(ADTC),     STUDYID = \"XX1234\"   ) %>%   select(-ADTC) %>%   derive_vars_merged(     dataset_add = adsl,     by_vars     = vars(STUDYID, USUBJID),     new_vars    = vars(TRTSDT)   )  pd_date <- date_source(   dataset_name = \"adrs\",   date         = ADT,   filter       = PARAMCD == \"PD\" )  aval_fun_pass <- function(arg) {   case_when(     arg == \"CR\" ~ 11,     arg == \"PR\" ~ 22,     arg == \"SD\" ~ 33,     arg == \"NON-CR/NON-PD\" ~ 44,     arg == \"PD\" ~ 55,     arg == \"NE\" ~ 66,     arg == \"MISSING\" ~ 77,     TRUE ~ NA_real_   ) }  # Derive best overall response parameter derive_param_bor(   adrs,   dataset_adsl = adsl,   filter_source = PARAMCD == \"OVR\" & ANL01FL == \"Y\",   source_pd = pd_date,   source_datasets = list(adrs = adrs),   aval_fun = aval_fun_pass,   reference_date = TRTSDT,   ref_start_window = 28,   set_values_to = vars(     PARAMCD = \"BOR\",     PARAM = \"Best Overall Response\"   ) ) %>%   filter(PARAMCD == \"BOR\") #> # A tibble: 8 x 9 #>   USUBJID AVALC  ANL01FL PARAMCD ADT        STUDYID TRTSDT     PARAM        AVAL #>   <chr>   <chr>  <chr>   <chr>   <date>     <chr>   <date>     <chr>       <dbl> #> 1 1       CR     Y       BOR     2020-02-01 XX1234  2020-01-01 Best Overa…    11 #> 2 2       PR     Y       BOR     2020-02-01 XX1234  2019-12-12 Best Overa…    22 #> 3 3       CR     Y       BOR     2019-11-12 XX1234  2019-11-11 Best Overa…    11 #> 4 4       PR     Y       BOR     2020-01-01 XX1234  2019-12-30 Best Overa…    22 #> 5 5       PR     Y       BOR     2020-01-01 XX1234  2020-01-01 Best Overa…    22 #> 6 6       CR     Y       BOR     2020-02-16 XX1234  2020-02-02 Best Overa…    11 #> 7 7       CR     Y       BOR     2020-02-16 XX1234  2020-02-02 Best Overa…    11 #> 8 8       MISSI… NA      BOR     NA         XX1234  2020-04-01 Best Overa…    77"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_clinbenefit.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a Parameter for Clinical Benefit — derive_param_clinbenefit","title":"Adds a Parameter for Clinical Benefit — derive_param_clinbenefit","text":"Adds parameter clinical benefit/disease control","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_clinbenefit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a Parameter for Clinical Benefit — derive_param_clinbenefit","text":"","code":"derive_param_clinbenefit(   dataset,   dataset_adsl,   filter_source,   source_resp,   source_pd,   source_datasets,   reference_date,   ref_start_window,   aval_fun = yn_to_numeric,   set_values_to,   subject_keys = vars(STUDYID, USUBJID) )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_clinbenefit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a Parameter for Clinical Benefit — derive_param_clinbenefit","text":"dataset Input dataset. dataset clinical benefit rate parameter added. variables PARAMCD, AVALC, ADT, specified subject_keys parameter reference_date parameter expected. dataset_adsl ADSL input dataset. variables specified subject_keysis expected. subject specified dataset new observation added input dataset. Variables dataset_adsl also appear dataset populated appropriate subject-specific value new observations. filter_source Filter condition dataset represents records overall disease response assessment subject given timepoint, e.g. PARAMCD == \"OVR\" PARAMCD == \"OVRLRESP\". source_resp date_source object specifying dataset, date variable, filter condition used identify response status. source_pd date_source object specifying dataset, date variable, filter condition used identify disease progression. source_datasets named list data sets expected. list must contain names provided dataset_name field date_source() objects specified source_pd source_resp. reference_date Name variable representing index date ref_start_window. variable providing date. unquoted symbol expected. ref_start_window Integer representing number days reference_date must elapse evaluable non-PD assessment counts toward determining clinical benefit. aval_fun Function map character analysis value (AVALC) numeric analysis value (AVAL) (first) argument function must expect character vector function must return numeric vector. Default: yn_to_numeric (see admiral::yn_to_numeric() details) set_values_to named list returned vars() containing new variables static value populated clinical benefit rate parameter records, e.g. vars(PARAMCD = \"CBR\", PARAM = \"Clinical Benefit Rate\"). subject_keys named list returned vars() containing variables used uniquely identify subjects.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_clinbenefit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a Parameter for Clinical Benefit — derive_param_clinbenefit","text":"input dataset new parameter clinical benefit","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_clinbenefit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a Parameter for Clinical Benefit — derive_param_clinbenefit","text":"Clinical benefit/disease control first identified looking subjects response status, derived subjects least one evaluable non-PD response assessment prior first PD (Progressive Disease) (.e., responses exclusive NA, NE, ND, PD) specified amount time reference date (ref_start_window). input dataset (dataset) restricted observations matching filter_source observations date specified source_pd. dataset restricted exclude response assessments NA, NE, ND, PD, missing response assessments, less ref_start_window reference_date. earliest assessment ADT selected. dataset identified dataset source_resp restricted according filter argument. variable corresponding date parameter source_resp considered together ADT previous step. observations added dataset, ADT set earlier first assessment date representing evaluable non-PD assessment prior first PD, date representing start response. observations added dataset, AVALC set Y subjects dataset meeting criteria clinical benefit N subjects meeting clinical benefit criteria dataset dataset identified source_resp N subjects present dataset_adsl present dataset dataset identified source_resp. AVAL derived using AVALC input function specified aval_fun. variables specified set_values_to added new observations values equal values specified . new observations added dataset. Variables held common dataset dataset_adsl kept new observations, populated values dataset_adsl.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_clinbenefit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adds a Parameter for Clinical Benefit — derive_param_clinbenefit","text":"Andrew Smith","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_clinbenefit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a Parameter for Clinical Benefit — derive_param_clinbenefit","text":"","code":"library(lubridate) library(dplyr) library(admiral)  adsl <- tibble::tribble(   ~USUBJID, ~TRTSDT,   \"01\",     ymd(\"2020-01-14\"),   \"02\",     ymd(\"2021-02-16\"),   \"03\",     ymd(\"2021-03-09\"),   \"04\",     ymd(\"2021-04-21\") ) %>%   mutate(STUDYID = \"AB42\")  adrs <- tibble::tribble(   ~USUBJID, ~PARAMCD, ~AVALC, ~ADT,   \"01\",     \"RSP\",    \"Y\",    ymd(\"2021-03-14\"),   \"02\",     \"RSP\",    \"N\",    ymd(\"2021-05-07\"),   \"03\",     \"RSP\",    \"N\",    NA,   \"04\",     \"RSP\",    \"N\",    NA,   \"01\",     \"PD\",     \"N\",    NA,   \"02\",     \"PD\",     \"Y\",    ymd(\"2021-05-07\"),   \"03\",     \"PD\",     \"N\",    NA,   \"04\",     \"PD\",     \"N\",    NA,   \"01\",     \"OVR\",    \"SD\",   ymd(\"2020-03-14\"),   \"01\",     \"OVR\",    \"PR\",   ymd(\"2021-04-13\"),   \"02\",     \"OVR\",    \"PR\",   ymd(\"2021-04-08\"),   \"02\",     \"OVR\",    \"PD\",   ymd(\"2021-05-07\"),   \"02\",     \"OVR\",    \"CR\",   ymd(\"2021-06-20\"),   \"03\",     \"OVR\",    \"SD\",   ymd(\"2021-03-30\"),   \"04\",     \"OVR\",    \"NE\",   ymd(\"2021-05-21\"),   \"04\",     \"OVR\",    \"NA\",   ymd(\"2021-06-30\"),   \"04\",     \"OVR\",    \"NE\",   ymd(\"2021-07-24\"),   \"04\",     \"OVR\",    \"ND\",   ymd(\"2021-09-04\"), ) %>%   mutate(STUDYID = \"AB42\", ANL01FL = \"Y\") %>%   derive_vars_merged(     dataset_add = adsl,     by_vars = vars(STUDYID, USUBJID),     new_vars = vars(TRTSDT)   )  pd <- date_source(   dataset_name = \"adrs\",   date = ADT,   filter = PARAMCD == \"PD\" & AVALC == \"Y\" & ANL01FL == \"Y\" )  resp <- date_source(   dataset_name = \"adrs\",   date = ADT,   filter = PARAMCD == \"RSP\" & AVALC == \"Y\" & ANL01FL == \"Y\" )  derive_param_clinbenefit(   dataset = adrs,   dataset_adsl = adsl,   filter_source = PARAMCD == \"OVR\" & ANL01FL == \"Y\",   source_resp = resp,   source_pd = pd,   source_datasets = list(adrs = adrs),   reference_date = TRTSDT,   ref_start_window = 28,   set_values_to = vars(     PARAMCD = \"CBR\"   ) ) %>%   filter(PARAMCD == \"CBR\") #> # A tibble: 4 x 8 #>   USUBJID PARAMCD AVALC ADT        STUDYID ANL01FL TRTSDT      AVAL #>   <chr>   <chr>   <chr> <date>     <chr>   <chr>   <date>     <dbl> #> 1 01      CBR     Y     2020-03-14 AB42    Y       2020-01-14     1 #> 2 02      CBR     Y     2021-04-08 AB42    Y       2021-02-16     1 #> 3 03      CBR     N     NA         AB42    NA      2021-03-09     0 #> 4 04      CBR     N     NA         AB42    NA      2021-04-21     0"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_confirmed_bor.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a Parameter for Confirmed Best Overall Response — derive_param_confirmed_bor","title":"Adds a Parameter for Confirmed Best Overall Response — derive_param_confirmed_bor","text":"Adds parameter confirmed best overall response (BOR)","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_confirmed_bor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a Parameter for Confirmed Best Overall Response — derive_param_confirmed_bor","text":"","code":"derive_param_confirmed_bor(   dataset,   dataset_adsl,   filter_source,   source_pd = NULL,   source_datasets,   reference_date,   ref_start_window,   ref_confirm,   max_nr_ne = 1,   accept_sd = FALSE,   missing_as_ne = FALSE,   aval_fun = aval_resp,   set_values_to,   subject_keys = vars(STUDYID, USUBJID) )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_confirmed_bor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a Parameter for Confirmed Best Overall Response — derive_param_confirmed_bor","text":"dataset Input dataset PARAMCD, ADT, AVALC variables variables specified subject_keys reference_date expected. dataset_adsl ADSL input dataset variables specified subject_keys expected. subject specified dataset new observation added input dataset. filter_source Source filter observations dataset_source fulfilling specified condition considered deriving confirmed best overall response. source_pd Date first progressive disease (PD) parameter specified, observations input dataset deriving new parameter restricted observations specified date. Observations specified date included. subjects without first PD date observations take account. Permitted Values: date_source object (see admiral::date_source() details) Default: NULL, source_datasets Source dataset first PD date named list datasets expected. links dataset_name source_pd existing dataset. example source_pd = pd_date   actual response dataset script myadrs, source_datasets = list(adrs = myadrs) specified. reference_date Reference date reference date used derivation \"SD\" \"NON-CR/NON-PD\" response (see \"Details\" section). Usually treatment start date (TRTSDT) randomization date (RANDDT). Permitted Values: numeric date variable ref_start_window Stable disease time window Assessments least specified number days reference date (.e. ADT >= reference_date + ref_start_window) response \"CR\", \"PR\", \"SD\", \"NON-CR/NON-PD\" considered \"SD\" \"NON-CR/NON-PD\" response. Permitted Values: non-negative numeric scalar ref_confirm Minimum time period confirmation assessment confirmatory assessment \"CR\" \"PR\" least specified number days apart. max_nr_ne specified number \"NE\" assessments assessment confirmatory assessment \"CR\" \"PR\" response accepted. Permitted Values: non-negative numeric scalar Default: 1 accept_sd Accept \"SD\" \"PR\"? argument set TRUE, one \"SD\" assessment assessment confirmatory assessment \"PR\" response accepted. Otherwise, \"SD\" assessment must occur two assessments. Permitted Values: logical scalar Default: FALSE missing_as_ne Consider assessments \"NE\"? argument set TRUE, response set \"NE\" subjects without assessment input dataset. Otherwise, response set \"MISSING\" subjects. Permitted Values: logical scalar Default: FALSE aval_fun Function map character analysis value (AVALC) numeric analysis value (AVAL) (first) argument function must expect character vector function must return numeric vector. Default: aval_resp (see aval_resp() details) set_values_to Variables set named list returned vars() defining variables set new parameter, e.g. vars(PARAMCD = \"CBOR\", PARAM = \"Confirmed Best Overall Response\") expected. values must symbols, character strings, numeric values, NA. subject_keys Variables uniquely identify subject list symbols created using vars() expected.","code":"pd_date <- date_source(   dataset_name = \"adrs\",   date = ADT,   filter = PARAMCD == PD )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_confirmed_bor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a Parameter for Confirmed Best Overall Response — derive_param_confirmed_bor","text":"input dataset new parameter confirmed best overall response","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_confirmed_bor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a Parameter for Confirmed Best Overall Response — derive_param_confirmed_bor","text":"input dataset (dataset) restricted observations matching filter_source observations date specified source_pd. following potential confirmed responses selected restricted input dataset: \"CR\": assessment considered complete response (CR) AVALC == \"CR\", confirmatory assessment AVALC == \"CR\" least ref_confirm days assessment, assessments assessment confirmatory assessment \"CR\" \"NE\", max_nr_ne \"NE\" assessments assessment confirmatory assessment. \"PR\": assessment considered partial response (PR) AVALC == \"PR\", confirmatory assessment AVALC %% c(\"CR\",   \"PR\") least ref_confirm days assessment, assessments assessment confirmatory assessment \"CR\", \"PR\", \"SD\", \"NE\", \"PR\" assessment \"CR\" assessment confirmation period, max_nr_ne \"NE\" assessments assessment confirmatory assessment, accept_sd argument set TRUE, one \"SD\" assessment confirmation period accepted. Otherwise, \"SD\" assessment must occur within confirmation period. \"SD\": assessment considered stable disease (SD) AVALC %% c(\"CR\", \"PR\", \"SD\") assessment least ref_start_window days reference_date. \"NON-CR/NON-PD\": assessment considered NON-CR/NON-PD AVALC = \"NON-CR/NON-PD\" assessment least ref_start_window days reference_date. \"PD\": assessment considered progressive disease (PD) AVALC == \"PD\". \"NE\": assessment considered estimable (NE) AVALC == \"NE\" AVALC %% c(\"CR\", \"PR\", \"SD\", \"NON-CR/NON-PD\") assessment less ref_start_window days reference_date. \"ND\": assessment considered done (ND) AVALC ==   \"ND\". \"MISSING\": assessment considered missing (MISSING) subject observation input dataset. missing_as_ne argument set TRUE, AVALC set \"NE\" subjects. subject best response derived previous step selected, \"CR\" best \"MISSING\" worst order . best response unique, first one (respect ADT) selected. selected record input dataset, variables kept. selected record dataset_adsl, variables dataset dataset_adsl kept. AVAL variable added set aval_fun(AVALC). variables specified set_values_to parameter added new observations. new observations added input dataset.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_confirmed_bor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adds a Parameter for Confirmed Best Overall Response — derive_param_confirmed_bor","text":"Stefan Bundfuss","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_confirmed_bor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a Parameter for Confirmed Best Overall Response — derive_param_confirmed_bor","text":"","code":"library(dplyr) library(lubridate) library(admiral)  # Create ADSL dataset adsl <- tibble::tribble(   ~USUBJID, ~TRTSDTC,   \"1\",      \"2020-01-01\",   \"2\",      \"2019-12-12\",   \"3\",      \"2019-11-11\",   \"4\",      \"2019-12-30\",   \"5\",      \"2020-01-01\",   \"6\",      \"2020-02-02\",   \"7\",      \"2020-02-02\",   \"8\",      \"2020-04-01\",   \"9\",      \"2020-03-01\" ) %>%   mutate(     TRTSDT = ymd(TRTSDTC),     STUDYID = \"XX1234\"   )  # Create ADRS dataset ovr_obs <- tibble::tribble(   ~USUBJID, ~ADTC,        ~mutate(PARAMCD = \"OVR\", ANL01FL = \"Y\")  pd_obs <-   bind_rows(tibble::tribble(     ~USUBJID, ~ADTC,        ~AVALC,     \"6\",      \"2020-04-12\", \"Y\"   ) %>%     mutate(PARAMCD = \"PD\", ANL01FL = \"Y\"))  adrs <- bind_rows(ovr_obs, pd_obs) %>%   mutate(     ADT = ymd(ADTC),     STUDYID = \"XX1234\"   ) %>%   select(-ADTC) %>%   derive_vars_merged(     dataset_add = adsl,     by_vars = vars(STUDYID, USUBJID),     new_vars = vars(TRTSDT)   )  pd_date <- date_source(   dataset_name = \"adrs\",   date = ADT,   filter = PARAMCD == \"PD\" & ANL01FL == \"Y\" )  # Derive confirmed best overall response parameter derive_param_confirmed_bor(   adrs,   dataset_adsl = adsl,   filter_source = PARAMCD == \"OVR\" & ANL01FL == \"Y\",   source_pd = pd_date,   source_datasets = list(adrs = adrs),   reference_date = TRTSDT,   ref_start_window = 28,   ref_confirm = 28,   set_values_to = vars(     PARAMCD = \"CBOR\",     PARAM = \"Best Confirmed Overall Response by Investigator\"   ) ) %>%   filter(PARAMCD == \"CBOR\") #> Warning: Dataset contains CR records followed by PR. #> Run `get_crpr_dataset()` to access the CR records records followed by PR #> # A tibble: 9 x 9 #>   USUBJID AVALC   PARAMCD ANL01FL ADT        STUDYID TRTSDT      AVAL PARAM      #>   <chr>   <chr>   <chr>   <chr>   <date>     <chr>   <date>     <dbl> <chr>      #> 1 1       CR      CBOR    Y       2020-02-01 XX1234  2020-01-01     1 Best Conf… #> 2 2       SD      CBOR    Y       2020-02-01 XX1234  2019-12-12     3 Best Conf… #> 3 3       SD      CBOR    Y       2020-01-01 XX1234  2019-11-11     3 Best Conf… #> 4 4       SD      CBOR    Y       2020-03-01 XX1234  2019-12-30     3 Best Conf… #> 5 5       NON-CR… CBOR    Y       2020-05-15 XX1234  2020-01-01     4 Best Conf… #> 6 6       SD      CBOR    Y       2020-03-30 XX1234  2020-02-02     3 Best Conf… #> 7 7       NE      CBOR    Y       2020-02-06 XX1234  2020-02-02     6 Best Conf… #> 8 8       MISSING CBOR    NA      NA         XX1234  2020-04-01     7 Best Conf… #> 9 9       SD      CBOR    Y       2020-05-01 XX1234  2020-03-01     3 Best Conf…  # Derive confirmed best overall response parameter (accepting SD for PR, # accept two NEs, and considering missings as NE) derive_param_confirmed_bor(   adrs,   dataset_adsl = adsl,   filter_source = PARAMCD == \"OVR\" & ANL01FL == \"Y\",   source_pd = pd_date,   source_datasets = list(adrs = adrs),   reference_date = TRTSDT,   ref_start_window = 28,   ref_confirm = 28,   max_nr_ne = 2,   accept_sd = TRUE,   missing_as_ne = TRUE,   set_values_to = vars(     PARAMCD = \"CBOR\",     PARAM = \"Best Confirmed Overall Response by Investigator\"   ) ) %>%   filter(PARAMCD == \"CBOR\") #> Warning: Dataset contains CR records followed by PR. #> Run `get_crpr_dataset()` to access the CR records records followed by PR #> # A tibble: 9 x 9 #>   USUBJID AVALC   PARAMCD ANL01FL ADT        STUDYID TRTSDT      AVAL PARAM      #>   <chr>   <chr>   <chr>   <chr>   <date>     <chr>   <date>     <dbl> <chr>      #> 1 1       CR      CBOR    Y       2020-02-01 XX1234  2020-01-01     1 Best Conf… #> 2 2       PR      CBOR    Y       2020-02-01 XX1234  2019-12-12     2 Best Conf… #> 3 3       SD      CBOR    Y       2020-01-01 XX1234  2019-11-11     3 Best Conf… #> 4 4       SD      CBOR    Y       2020-03-01 XX1234  2019-12-30     3 Best Conf… #> 5 5       NON-CR… CBOR    Y       2020-05-15 XX1234  2020-01-01     4 Best Conf… #> 6 6       SD      CBOR    Y       2020-03-30 XX1234  2020-02-02     3 Best Conf… #> 7 7       NE      CBOR    Y       2020-02-06 XX1234  2020-02-02     6 Best Conf… #> 8 8       NE      CBOR    NA      NA         XX1234  2020-04-01     6 Best Conf… #> 9 9       CR      CBOR    Y       2020-03-16 XX1234  2020-03-01     1 Best Conf…"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_confirmed_resp.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a Parameter for Confirmed Response — derive_param_confirmed_resp","title":"Adds a Parameter for Confirmed Response — derive_param_confirmed_resp","text":"Adds parameter confirmed response","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_confirmed_resp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a Parameter for Confirmed Response — derive_param_confirmed_resp","text":"","code":"derive_param_confirmed_resp(   dataset,   dataset_adsl,   filter_source,   source_pd = NULL,   source_datasets,   ref_confirm,   max_nr_ne = 1,   accept_sd = FALSE,   aval_fun = yn_to_numeric,   set_values_to,   subject_keys = vars(STUDYID, USUBJID) )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_confirmed_resp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a Parameter for Confirmed Response — derive_param_confirmed_resp","text":"dataset Input dataset PARAMCD, ADT, AVALC variables variables specified subject_keys reference_date expected. dataset_adsl ADSL input dataset variables specified subject_keys expected. subject specified dataset new observation added input dataset. filter_source Source filter observations dataset_source fulfilling specified condition considered deriving confirmed response. source_pd Date first progressive disease (PD) parameter specified, observations input dataset deriving new parameter restricted observations specified date. Observations specified date included. subjects without first PD date observations take account. Permitted Values: date_source object (see admiral::date_source() details) Default: NULL, source_datasets Source dataset first PD date named list datasets expected. links dataset_name source_pd existing dataset. example source_pd = pd_date   actual response dataset script myadrs, source_datasets = list(adrs = myadrs) specified. ref_confirm Minimum time period confirmation assessment confirmatory assessment \"CR\" \"PR\" least specified number days apart. max_nr_ne specified number \"NE\" assessments assessment confirmatory assessment \"CR\" \"PR\" response accepted. Permitted Values: non-negative numeric scalar Default: 1 accept_sd Accept \"SD\" \"PR\"? argument set TRUE, one \"SD\" assessment assessment confirmatory assessment \"PR\" response accepted. Otherwise, \"SD\" assessment must occur two assessments. Permitted Values: logical scalar Default: FALSE aval_fun Function map character analysis value (AVALC) numeric analysis value (AVAL) (first) argument function must expect character vector function must return numeric vector. Default: yn_to_numeric (see admiral::yn_to_numeric() details) set_values_to Variables set named list returned vars() defining variables set new parameter, e.g. vars(PARAMCD = \"CRSP\", PARAM = \"Confirmed Response\") expected. values must symbols, character strings, numeric values, NA. subject_keys Variables uniquely identify subject list symbols created using vars() expected. Default: vars(STUDYID, USUBJID)","code":"pd_date <- date_source(   dataset_name = \"adrs\",   date = ADT,   filter = PARAMCD == PD )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_confirmed_resp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a Parameter for Confirmed Response — derive_param_confirmed_resp","text":"input dataset new parameter confirmed response","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_confirmed_resp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a Parameter for Confirmed Response — derive_param_confirmed_resp","text":"input dataset (dataset) restricted observations matching filter_source observations date specified source_pd. subject considered responder least one observation restricted dataset AVALC == \"CR\", confirmatory assessment AVALC == \"CR\" least ref_confirm days assessment, assessments assessment confirmatory assessment \"CR\" \"NE\", max_nr_ne \"NE\" assessments assessment confirmatory assessment. least one observation AVALC == \"PR\", confirmatory assessment AVALC %% c(\"CR\", \"PR\") least ref_confirm days assessment, assessments assessment confirmatory assessment \"CR\", \"PR\", \"SD\", \"NE\", \"PR\" assessment \"CR\" assessment confirmation period, max_nr_ne \"NE\" assessments assessment confirmatory assessment, accept_sd argument set TRUE, one \"SD\" assessment confirmation period accepted. Otherwise, \"SD\" assessment must occur within confirmation period. responders AVALC set \"Y\" ADT first date response criteria fulfilled. subjects dataset_adsl AVALC set \"N\" ADT NA. AVAL variable added set aval_fun(AVALC). variables specified set_values_to parameter added new observations. new observations added input dataset.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_confirmed_resp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adds a Parameter for Confirmed Response — derive_param_confirmed_resp","text":"Stefan Bundfuss","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_confirmed_resp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a Parameter for Confirmed Response — derive_param_confirmed_resp","text":"","code":"library(dplyr) library(admiral)  # Create ADSL dataset adsl <- tibble::tribble(   ~USUBJID, ~TRTSDTC,   \"1\",      \"2020-01-01\",   \"2\",      \"2019-12-12\",   \"3\",      \"2019-11-11\",   \"4\",      \"2019-12-30\",   \"5\",      \"2020-01-01\",   \"6\",      \"2020-02-02\",   \"7\",      \"2020-02-02\",   \"8\",      \"2020-04-01\",   \"9\",      \"2020-03-01\" ) %>%   mutate(     STUDYID = \"XX1234\"   )  # Create ADRS dataset ovr_obs <- tibble::tribble(   ~USUBJID, ~ADTC,        ~mutate(PARAMCD = \"OVR\", ANL01FL = \"Y\")  pd_obs <-   bind_rows(tibble::tribble(     ~USUBJID, ~ADTC,        ~AVALC,     \"6\",      \"2020-04-12\", \"Y\"   ) %>%     mutate(PARAMCD = \"PD\", ANL01FL = \"Y\"))  adrs <- bind_rows(ovr_obs, pd_obs) %>%   mutate(     ADT = lubridate::ymd(ADTC),     STUDYID = \"XX1234\"   ) %>%   select(-ADTC)  pd_date <- date_source(   dataset_name = \"adrs\",   date = ADT,   filter = PARAMCD == \"PD\" & ANL01FL == \"Y\" )  # Derive confirmed response parameter derive_param_confirmed_resp(   adrs,   dataset_adsl = adsl,   filter_source = PARAMCD == \"OVR\" & ANL01FL == \"Y\",   source_pd = pd_date,   source_datasets = list(adrs = adrs),   ref_confirm = 28,   set_values_to = vars(     PARAMCD = \"CRSP\",     PARAM = \"Confirmed Response by Investigator\"   ) ) %>%   filter(PARAMCD == \"CRSP\") #> Warning: Dataset contains CR records followed by PR. #> Run `get_crpr_dataset()` to access the CR records records followed by PR #> # A tibble: 9 x 8 #>   USUBJID AVALC PARAMCD ANL01FL ADT        STUDYID  AVAL PARAM                   #>   <chr>   <chr> <chr>   <chr>   <date>     <chr>   <dbl> <chr>                   #> 1 1       Y     CRSP    Y       2020-01-01 XX1234      1 Confirmed Response by … #> 2 2       N     CRSP    NA      NA         XX1234      0 Confirmed Response by … #> 3 3       N     CRSP    NA      NA         XX1234      0 Confirmed Response by … #> 4 4       N     CRSP    NA      NA         XX1234      0 Confirmed Response by … #> 5 5       N     CRSP    NA      NA         XX1234      0 Confirmed Response by … #> 6 6       N     CRSP    NA      NA         XX1234      0 Confirmed Response by … #> 7 7       N     CRSP    NA      NA         XX1234      0 Confirmed Response by … #> 8 8       N     CRSP    NA      NA         XX1234      0 Confirmed Response by … #> 9 9       N     CRSP    NA      NA         XX1234      0 Confirmed Response by …  # Derive confirmed response parameter (accepting SD for PR and two NEs) derive_param_confirmed_resp(   adrs,   dataset_adsl = adsl,   filter_source = PARAMCD == \"OVR\" & ANL01FL == \"Y\",   source_pd = pd_date,   source_datasets = list(adrs = adrs),   ref_confirm = 28,   max_nr_ne = 2,   accept_sd = TRUE,   set_values_to = vars(     PARAMCD = \"CRSP\",     PARAM = \"Confirmed Response by Investigator\"   ) ) %>%   filter(PARAMCD == \"CRSP\") #> Warning: Dataset contains CR records followed by PR. #> Run `get_crpr_dataset()` to access the CR records records followed by PR #> # A tibble: 9 x 8 #>   USUBJID AVALC PARAMCD ANL01FL ADT        STUDYID  AVAL PARAM                   #>   <chr>   <chr> <chr>   <chr>   <date>     <chr>   <dbl> <chr>                   #> 1 1       Y     CRSP    Y       2020-01-01 XX1234      1 Confirmed Response by … #> 2 2       Y     CRSP    Y       2020-02-01 XX1234      1 Confirmed Response by … #> 3 3       N     CRSP    NA      NA         XX1234      0 Confirmed Response by … #> 4 4       N     CRSP    NA      NA         XX1234      0 Confirmed Response by … #> 5 5       N     CRSP    NA      NA         XX1234      0 Confirmed Response by … #> 6 6       N     CRSP    NA      NA         XX1234      0 Confirmed Response by … #> 7 7       N     CRSP    NA      NA         XX1234      0 Confirmed Response by … #> 8 8       N     CRSP    NA      NA         XX1234      0 Confirmed Response by … #> 9 9       Y     CRSP    Y       2020-03-16 XX1234      1 Confirmed Response by …"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_lasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a Parameter for the Last Disease Assessment — derive_param_lasta","title":"Adds a Parameter for the Last Disease Assessment — derive_param_lasta","text":"Adds parameter last disease assessment (optionally) first progressive disease","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_lasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a Parameter for the Last Disease Assessment — derive_param_lasta","text":"","code":"derive_param_lasta(   dataset,   filter_source,   order = vars(ADT),   source_pd = NULL,   source_datasets = NULL,   subject_keys = vars(STUDYID, USUBJID),   set_values_to )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_lasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a Parameter for the Last Disease Assessment — derive_param_lasta","text":"dataset Input dataframe Last Disease Assessment derived added . column PARAMCD columns specified subject_keys order expected. Permitted Values: data.frame() object Required Optional: Required filter_source Filter applied dataset derive Last Disease Assessment Required Optional: Required order Sort order, last record shall taken subject_keys determine Last Disease Assessment. Created using vars(). Permitted Values: list variables desc(<variable>) function calls created vars(), e.g., vars(ADT, desc(AVAL)) Default: vars(ADT) Required Optional: Required source_pd Date first progressive disease (PD) parameter specified, observations input dataset deriving new parameter restricted observations specified date. Observations specified date included. subjects without first PD date observations take account. Permitted Values: date_source object (see date_source() details) Default: NULL Required Optional: Optional source_datasets Source dataframe used calculate first PD date named list dataframes expected (although BOR) one dataframe needed. links dataset_name source_pd existing dataframe. example source_pd = pd_date   actual response dataframe script myadrs, source_datasets = list(adrs = myadrs) specified. Required Optional: Optional subject_keys Columns uniquely identify subject list symbols created using vars(). Default: vars(STUDYID, USUBJID) Required Optional: Required set_values_to Columns set named list returned vars() defining columns set new parameter, e.g. vars(PARAMCD = \"LSTAC\", PARAM = \"Last Disease Assessment Censored First PD Investigator\") expected. values must symbols, character strings, numeric values, NA. Required Optional: Required","code":"pd_date <- date_source(   dataset_name = \"adrs\",   date = ADT,   filter = PARAMCD == PD )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_lasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a Parameter for the Last Disease Assessment — derive_param_lasta","text":"dataframe passed dataset argument additional columns /rows set set_values_to argument.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_lasta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a Parameter for the Last Disease Assessment — derive_param_lasta","text":"Calculates last disease assessment accessing last record defined subject_keys arranged using order argument. Creates new parameter record (keeping columns passed) last source record (.e. last record defined subject_keys arranged using order argument). One new record subject filtered input dataset added input dataset. Records PD can removed using source_pd source_datasets arguments.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_lasta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adds a Parameter for the Last Disease Assessment — derive_param_lasta","text":"Stephen Gormley","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_lasta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a Parameter for the Last Disease Assessment — derive_param_lasta","text":"","code":"library(dplyr) library(lubridate) library(admiral) library(tibble) library(magrittr)  adsl <- tribble(   ~USUBJID, ~TRTSDT,                      ~EOSDT,   \"01\",     ymd(\"2020-12-06\"), ymd(\"2022-03-06\"),   \"02\",     ymd(\"2021-01-16\"), ymd(\"2022-02-03\"),   \"03\",     ymd(\"2021-01-09\"), ymd(\"2021-02-24\"),   \"04\",     ymd(\"2021-04-21\"), ymd(\"2021-09-15\") ) %>%   mutate(STUDYID = \"a_study_id\")  adrs <- tribble(   ~USUBJID, ~PARAMCD, ~AVAL, ~AVALC, ~ASEQ, ~ADT, ~ANL01FL,   \"01\", \"RSP\", NA, \"Y\", 1, ymd(\"2021-04-08\"), NA,   \"02\", \"RSP\", NA, \"N\", 1, ymd(\"2021-05-07\"), NA,   \"03\", \"RSP\", NA, \"N\", 1, NA, NA,   \"04\", \"RSP\", NA, \"N\", 1, NA, NA,   \"01\", \"PD\", NA, \"N\", 1, NA, NA,   \"02\", \"PD\", NA, \"Y\", 1, ymd(\"2021-05-07\"), NA,   \"03\", \"PD\", NA, \"N\", 1, NA, NA,   \"04\", \"PD\", NA, \"N\", 1, NA, NA,   \"01\", \"OVR\", 3, \"SD\", 1, ymd(\"2021-03-07\"), \"Y\",   \"01\", \"OVR\", 2, \"PR\", 1, ymd(\"2021-04-08\"), \"Y\",   \"02\", \"OVR\", 3, \"SD\", 1, ymd(\"2021-03-07\"), \"Y\",   \"02\", \"OVR\", NA, NA, 1, ymd(\"2021-04-07\"), NA,   \"02\", \"OVR\", 6, \"PD\", 1, ymd(\"2021-05-07\"), \"Y\",   \"03\", \"OVR\", 3, \"SD\", 1, ymd(\"2021-01-30\"), NA,   \"03\", \"OVR\", 3, \"SD\", 2, ymd(\"2021-01-30\"), \"Y\",   \"04\", \"OVR\", NA, \"NE\", 1, ymd(\"2021-05-21\"), \"Y\",   \"04\", \"OVR\", 5, \"NON-PD\", 1, ymd(\"2021-06-30\"), \"Y\",   \"04\", \"OVR\", NA, \"NE\", 1, ymd(\"2021-07-24\"), \"Y\",   \"04\", \"OVR\", NA, \"ND\", 1, ymd(\"2021-09-30\"), \"Y\" ) %>%   mutate(STUDYID = \"a_study_id\")  pd <- date_source(   dataset_name = \"adrs\",   date         = ADT,   filter       = PARAMCD == \"PD\" & AVALC == \"Y\" )  derive_param_lasta(   adrs,   filter_source = PARAMCD == \"OVR\" & ANL01FL == \"Y\",   source_pd = pd,   source_datasets = list(adrs = adrs),   set_values_to = vars(     PARAMCD = \"LSTAC\",     PARAM = \"Last Disease Assessment Censored at First PD by Investigator\",     PARCAT1 = \"Tumor Response\",     PARCAT2 = \"Investigator\",     PARCAT3 = \"Recist 1.1\",     ANL01FL = \"Y\"   ) ) %>%   filter(PARAMCD == \"LSTAC\") #> # A tibble: 4 x 12 #>   USUBJID PARAMCD  AVAL AVALC  ASEQ ADT        ANL01FL STUDYID PARAM PARCAT1 #>   <chr>   <chr>   <dbl> <chr> <dbl> <date>     <chr>   <chr>   <chr> <chr>   #> 1 01      LSTAC       2 PR        1 2021-04-08 Y       a_stud… Last… Tumor … #> 2 02      LSTAC       6 PD        1 2021-05-07 Y       a_stud… Last… Tumor … #> 3 03      LSTAC       3 SD        2 2021-01-30 Y       a_stud… Last… Tumor … #> 4 04      LSTAC      NA ND        1 2021-09-30 Y       a_stud… Last… Tumor … #> # … with 2 more variables: PARCAT2 <chr>, PARCAT3 <chr>"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a Parameter Indicating If a Subject Had a Response before Progressive\nDisease — derive_param_response","title":"Adds a Parameter Indicating If a Subject Had a Response before Progressive\nDisease — derive_param_response","text":"Adds parameter indicating response observed. response observed, AVALC set \"Y\", AVAL 1 ADT set first date response observed. response observed, AVALC set \"N\", AVAL 0 ADT set NA.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a Parameter Indicating If a Subject Had a Response before Progressive\nDisease — derive_param_response","text":"","code":"derive_param_response(   dataset,   dataset_adsl,   filter_source,   source_pd,   source_datasets,   set_values_to,   subject_keys = vars(STUDYID, USUBJID) )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a Parameter Indicating If a Subject Had a Response before Progressive\nDisease — derive_param_response","text":"dataset Input dataset variables specified subject_keysand ADT expected. dataset_adsl Input dataset variables specified subject_keys expected. observation specified dataset new observation added input dataset. capture patients may never tumor assessment. filter_source Source filter observations dataset data fulfilling specified condition selected. source_pd Sources conditions defining end assessment period responses. object type date_source expected observations dataset defining response data fulfilling filter_source condition considered response fall end assessment period defined source_pd. subjects least one response end assessment period, AVALC set \"Y\", AVAL 1, ADT first date response occurred. subjects AVALC set \"N\", AVAL 0, ADT NA. source_datasets Source dataset named list datasets one element expected (e.g. list(adrs= adrs)). name must match dataset_name field admiral::date_source() object specified source_pd. variables specified subject_keys argument date field admiral::date_source() object expected dataset. set_values_to Variables set named list returned vars() defining variables set new parameter, e.g. vars(PARAMCD = \"RSP\", PARAM = \"Response investigator\") expected. values must symbols, character strings, numeric values NA. subject_keys Variables uniquely identify subject list symbols created using vars() expected.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a Parameter Indicating If a Subject Had a Response before Progressive\nDisease — derive_param_response","text":"input dataset new parameter indicating response occurred","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_response.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a Parameter Indicating If a Subject Had a Response before Progressive\nDisease — derive_param_response","text":"Date end assessment period (e.g. Progressive disease, defined pd_source) added response dataset. response dataset restricted observations occurring ** ** date progressive disease. subject (respect variables specified subject_keys parameter), first observation (respect ADT) response condition (filter_source parameter) fulfilled selected. observation dataset_adsl new observation created. subjects response AVALC set \"Y\", AVAL 1, ADT  first date (ADT) response condition fulfilled. subjects AVALC set \"N\", AVAL 0 ADT NA. variables specified set_values_to parameter added new observations. new observations added input dataset.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_response.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adds a Parameter Indicating If a Subject Had a Response before Progressive\nDisease — derive_param_response","text":"Samia Kabi","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/derive_param_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a Parameter Indicating If a Subject Had a Response before Progressive\nDisease — derive_param_response","text":"","code":"library(dplyr) library(admiral) library(lubridate) library(rlang) #>  #> Attaching package: ‘rlang’ #> The following object is masked from ‘package:magrittr’: #>  #>     set_names  adsl <- tibble::tribble(   ~USUBJID,   \"1\",   \"2\",   \"3\",   \"4\" ) %>%   mutate(STUDYID = \"XX1234\")  adrs <- tibble::tribble(   ~USUBJID, ~PARAMCD, ~ADTC,         ~AVALC, ~ANL01FL,   \"1\",      \"OVR\",    \"2020-01-02\",  \"PR\",   \"Y\",   \"1\",      \"OVR\",    \"2020-02-01\",  \"CR\",   \"Y\",   \"1\",      \"OVR\",    \"2020-03-01\",  \"CR\",   \"Y\",   \"1\",      \"OVR\",    \"2020-04-01\",  \"SD\",   \"Y\",   \"1\",      \"PD\",     NA_character_, \"N\",    \"Y\",   \"2\",      \"OVR\",    \"2021-06-15\",  \"SD\",   \"Y\",   \"2\",      \"OVR\",    \"2021-07-16\",  \"PD\",   \"Y\",   \"2\",      \"OVR\",    \"2021-09-14\",  \"PD\",   \"Y\",   \"2\",      \"PD\",     \"2021-09-14\",  \"Y\",    \"Y\",   \"3\",      \"OVR\",    \"2021-09-14\",  \"SD\",   \"Y\",   \"3\",      \"OVR\",    \"2021-10-30\",  \"PD\",   \"Y\",   \"3\",      \"OVR\",    \"2021-12-25\",  \"CR\",   \"Y\",   \"3\",      \"PD\",     \"2021-10-30\",  \"Y\",    \"Y\" ) %>%   mutate(     STUDYID = \"XX1234\",     ADT = ymd(ADTC),     ANL01FL = \"Y\"   ) %>%   select(-ADTC)  # Define the end of the assessment period for responses: # all responses before or on the first PD will be used. pd <- date_source(   dataset_name = \"adrs\",   date = ADT,   filter = PARAMCD == \"PD\" & AVALC == \"Y\" ) # Derive the response parameter derive_param_response(   dataset = adrs,   dataset_adsl = adsl,   filter_source = PARAMCD == \"OVR\" & AVALC %in% c(\"CR\", \"PR\") & ANL01FL == \"Y\",   source_pd = pd,   source_datasets = list(adrs = adrs),   set_values_to = vars(     PARAMCD = \"RSP\",     PARAM = \"Response by investigator\"   ),   subject_keys = vars(STUDYID, USUBJID) ) %>%   arrange(USUBJID, PARAMCD, ADT) #> Joining, by = c(\"USUBJID\", \"STUDYID\") #> # A tibble: 17 x 8 #>    USUBJID PARAMCD AVALC ANL01FL STUDYID ADT         AVAL PARAM                  #>    <chr>   <chr>   <chr> <chr>   <chr>   <date>     <dbl> <chr>                  #>  1 1       OVR     PR    Y       XX1234  2020-01-02    NA NA                     #>  2 1       OVR     CR    Y       XX1234  2020-02-01    NA NA                     #>  3 1       OVR     CR    Y       XX1234  2020-03-01    NA NA                     #>  4 1       OVR     SD    Y       XX1234  2020-04-01    NA NA                     #>  5 1       PD      N     Y       XX1234  NA            NA NA                     #>  6 1       RSP     Y     Y       XX1234  2020-01-02     1 Response by investiga… #>  7 2       OVR     SD    Y       XX1234  2021-06-15    NA NA                     #>  8 2       OVR     PD    Y       XX1234  2021-07-16    NA NA                     #>  9 2       OVR     PD    Y       XX1234  2021-09-14    NA NA                     #> 10 2       PD      Y     Y       XX1234  2021-09-14    NA NA                     #> 11 2       RSP     N     NA      XX1234  NA             0 Response by investiga… #> 12 3       OVR     SD    Y       XX1234  2021-09-14    NA NA                     #> 13 3       OVR     PD    Y       XX1234  2021-10-30    NA NA                     #> 14 3       OVR     CR    Y       XX1234  2021-12-25    NA NA                     #> 15 3       PD      Y     Y       XX1234  2021-10-30    NA NA                     #> 16 3       RSP     N     NA      XX1234  NA             0 Response by investiga… #> 17 4       RSP     N     NA      XX1234  NA             0 Response by investiga…"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/filter_pd.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter up to First PD (Progressive Disease) Date — filter_pd","title":"Filter up to First PD (Progressive Disease) Date — filter_pd","text":"Filter dataset include source parameter records including first PD (progressive disease). records passed downstream derivations regarding responses BOR (best overall response).","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/filter_pd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter up to First PD (Progressive Disease) Date — filter_pd","text":"","code":"filter_pd(   dataset,   filter,   source_pd,   source_datasets,   subject_keys = vars(STUDYID, USUBJID) )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/filter_pd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter up to First PD (Progressive Disease) Date — filter_pd","text":"dataset Input dataset variables ADT specified subject_keys expected. filter Filter condition restricting input dataset source_pd admiral::date_source() object providing date first PD subject first date (date field) provided dataset (dataset_name field) restricted filter field considered first PD date. source_datasets named list data sets expected. name must match name provided dataset_name field admiral::date_source() object specified source_pd. subject_keys Variables uniquely identify subject list symbols created using vars() expected. Default: vars(STUDYID, USUBJID)","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/filter_pd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter up to First PD (Progressive Disease) Date — filter_pd","text":"subset input dataset","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/filter_pd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter up to First PD (Progressive Disease) Date — filter_pd","text":"input dataset (dataset) restricted filter. subject first PD date derived first date (source_pd$date) source pd dataset (source_datasets[[source_pd$dataset_name]]) restricted source_pd$filter. restricted input dataset restricted records first PD date. Records matching first PD date included. subject without first PD date, records included.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/filter_pd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter up to First PD (Progressive Disease) Date — filter_pd","text":"Teckla Akinyi, Stefan Bundfuss","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/filter_pd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter up to First PD (Progressive Disease) Date — filter_pd","text":"","code":"library(dplyr) library(lubridate) library(admiral) library(admiralonco)  # Filter OVR records up to first PD, first PD date provided in separate BDS dataset (adevent) adrs <- tibble::tribble(   ~STUDYID,       ~USUBJID,      ~PARAMCD, ~AVALC, ~ADT,         ~ANL01FL,   \"CDISCPILOT01\", \"01-701-1015\", \"OVR\",    \"CR\",   \"2016-01-25\", \"Y\",   \"CDISCPILOT01\", \"01-701-1015\", \"OVR\",    \"SD\",   \"2016-02-22\", NA_character_,   \"CDISCPILOT01\", \"01-701-1015\", \"OVR\",    \"PD\",   \"2016-02-22\", \"Y\",   \"CDISCPILOT01\", \"01-701-1015\", \"BOR\",    \"CR\",   \"2016-01-25\", \"Y\",   \"CDISCPILOT01\", \"01-701-1034\", \"OVR\",    \"SD\",   \"2015-12-07\", \"Y\",   \"CDISCPILOT01\", \"01-701-1034\", \"OVR\",    \"PD\",   \"2016-04-25\", \"Y\",   \"CDISCPILOT01\", \"01-701-1034\", \"OVR\",    \"PD\",   \"2016-06-25\", \"Y\",   \"CDISCPILOT01\", \"01-701-1034\", \"BOR\",    \"SD\",   \"2015-12-07\", \"Y\",   \"CDISCPILOT01\", \"01-701-1035\", \"OVR\",    \"SD\",   \"2016-04-25\", \"Y\",   \"CDISCPILOT01\", \"01-701-1035\", \"OVR\",    \"PR\",   \"2016-06-25\", \"Y\",   \"CDISCPILOT01\", \"01-701-1035\", \"BOR\",    \"PR\",   \"2016-06-25\", \"Y\" ) %>% mutate(   ADT = as_date(ADT) )  adevent <- tibble::tribble(   ~STUDYID,       ~USUBJID,      ~PARAMCD, ~AVALC, ~ADT,   \"CDISCPILOT01\", \"01-701-1015\", \"PD\",     \"Y\",    \"2016-02-22\",   \"CDISCPILOT01\", \"01-701-1034\", \"PD\",     \"Y\",    \"2016-04-25\" ) %>% mutate(   ADT = as_date(ADT) )  pd <- date_source(   dataset_name = \"adevent\",   date = ADT,   filter = PARAMCD == \"PD\" )  filter_pd(   dataset = adrs,   filter = PARAMCD == \"OVR\" & ANL01FL == \"Y\",   source_pd = pd,   source_datasets = list(adevent = adevent) ) #> # A tibble: 6 x 6 #>   STUDYID      USUBJID     PARAMCD AVALC ADT        ANL01FL #>   <chr>        <chr>       <chr>   <chr> <date>     <chr>   #> 1 CDISCPILOT01 01-701-1015 OVR     CR    2016-01-25 Y       #> 2 CDISCPILOT01 01-701-1015 OVR     PD    2016-02-22 Y       #> 3 CDISCPILOT01 01-701-1034 OVR     SD    2015-12-07 Y       #> 4 CDISCPILOT01 01-701-1034 OVR     PD    2016-04-25 Y       #> 5 CDISCPILOT01 01-701-1035 OVR     SD    2016-04-25 Y       #> 6 CDISCPILOT01 01-701-1035 OVR     PR    2016-06-25 Y        # Filter OVR records up to first PD, first PD date provided in ADSL dataset adsl <- tibble::tribble(   ~STUDYID,       ~USUBJID,      ~PDDT,   \"CDISCPILOT01\", \"01-701-1015\", \"2016-02-22\",   \"CDISCPILOT01\", \"01-701-1034\", \"2016-04-25\",   \"CDISCPILOT01\", \"01-701-1035\", \"\" ) %>% mutate(   PDDT = as_date(PDDT) )  pd <- date_source(   dataset_name = \"adsl\",   date = PDDT )  filter_pd(   dataset = adrs,   filter = PARAMCD == \"OVR\" & ANL01FL == \"Y\",   source_pd = pd,   source_datasets = list(adsl = adsl) ) #> # A tibble: 6 x 6 #>   STUDYID      USUBJID     PARAMCD AVALC ADT        ANL01FL #>   <chr>        <chr>       <chr>   <chr> <date>     <chr>   #> 1 CDISCPILOT01 01-701-1015 OVR     CR    2016-01-25 Y       #> 2 CDISCPILOT01 01-701-1015 OVR     PD    2016-02-22 Y       #> 3 CDISCPILOT01 01-701-1034 OVR     SD    2015-12-07 Y       #> 4 CDISCPILOT01 01-701-1034 OVR     PD    2016-04-25 Y       #> 5 CDISCPILOT01 01-701-1035 OVR     SD    2016-04-25 Y       #> 6 CDISCPILOT01 01-701-1035 OVR     PR    2016-06-25 Y        # Filter OVR records up to first PD, first PD date provided in input dataset (PD parameter) adrs <- tibble::tribble(   ~STUDYID,       ~USUBJID,      ~PARAMCD, ~AVALC, ~ADT,         ~ANL01FL,   \"CDISCPILOT01\", \"01-701-1015\", \"OVR\",    \"CR\",   \"2016-01-25\", \"Y\",   \"CDISCPILOT01\", \"01-701-1015\", \"OVR\",    \"SD\",   \"2016-02-22\", NA_character_,   \"CDISCPILOT01\", \"01-701-1015\", \"OVR\",    \"PD\",   \"2016-02-22\", \"Y\",   \"CDISCPILOT01\", \"01-701-1015\", \"BOR\",    \"CR\",   \"2016-01-25\", \"Y\",   \"CDISCPILOT01\", \"01-701-1034\", \"OVR\",    \"SD\",   \"2015-12-07\", \"Y\",   \"CDISCPILOT01\", \"01-701-1034\", \"OVR\",    \"PD\",   \"2016-04-25\", \"Y\",   \"CDISCPILOT01\", \"01-701-1034\", \"OVR\",    \"PD\",   \"2016-06-25\", \"Y\",   \"CDISCPILOT01\", \"01-701-1034\", \"BOR\",    \"SD\",   \"2015-12-07\", \"Y\",   \"CDISCPILOT01\", \"01-701-1035\", \"OVR\",    \"SD\",   \"2016-04-25\", \"Y\",   \"CDISCPILOT01\", \"01-701-1035\", \"OVR\",    \"PR\",   \"2016-06-25\", \"Y\",   \"CDISCPILOT01\", \"01-701-1035\", \"BOR\",    \"PR\",   \"2016-06-25\", \"Y\",   \"CDISCPILOT01\", \"01-701-1015\", \"PD\",     \"Y\",    \"2016-02-22\", \"Y\",   \"CDISCPILOT01\", \"01-701-1034\", \"PD\",     \"Y\",    \"2016-04-25\", \"Y\" ) %>% mutate(   ADT = as_date(ADT) )  pd <- date_source(   dataset_name = \"adrs\",   date = ADT,   filter = PARAMCD == \"PD\" )  filter_pd(   dataset = adrs,   filter = PARAMCD == \"OVR\" & ANL01FL == \"Y\",   source_pd = pd,   source_datasets = list(adrs = adrs) ) #> # A tibble: 6 x 6 #>   STUDYID      USUBJID     PARAMCD AVALC ADT        ANL01FL #>   <chr>        <chr>       <chr>   <chr> <date>     <chr>   #> 1 CDISCPILOT01 01-701-1015 OVR     CR    2016-01-25 Y       #> 2 CDISCPILOT01 01-701-1015 OVR     PD    2016-02-22 Y       #> 3 CDISCPILOT01 01-701-1034 OVR     SD    2015-12-07 Y       #> 4 CDISCPILOT01 01-701-1034 OVR     PD    2016-04-25 Y       #> 5 CDISCPILOT01 01-701-1035 OVR     SD    2016-04-25 Y       #> 6 CDISCPILOT01 01-701-1035 OVR     PR    2016-06-25 Y        # Filter OVR records up to first PD, first PD date derived from OVR records adrs <- tibble::tribble(   ~STUDYID,       ~USUBJID,      ~PARAMCD, ~AVALC, ~ADT,         ~ANL01FL,   \"CDISCPILOT01\", \"01-701-1015\", \"OVR\",    \"CR\",   \"2016-01-25\", \"Y\",   \"CDISCPILOT01\", \"01-701-1015\", \"OVR\",    \"SD\",   \"2016-02-22\", NA_character_,   \"CDISCPILOT01\", \"01-701-1015\", \"OVR\",    \"PD\",   \"2016-02-22\", \"Y\",   \"CDISCPILOT01\", \"01-701-1015\", \"BOR\",    \"CR\",   \"2016-01-25\", \"Y\",   \"CDISCPILOT01\", \"01-701-1034\", \"OVR\",    \"SD\",   \"2015-12-07\", \"Y\",   \"CDISCPILOT01\", \"01-701-1034\", \"OVR\",    \"PD\",   \"2016-04-25\", \"Y\",   \"CDISCPILOT01\", \"01-701-1034\", \"OVR\",    \"PD\",   \"2016-06-25\", \"Y\",   \"CDISCPILOT01\", \"01-701-1034\", \"BOR\",    \"SD\",   \"2015-12-07\", \"Y\",   \"CDISCPILOT01\", \"01-701-1035\", \"OVR\",    \"SD\",   \"2016-04-25\", \"Y\",   \"CDISCPILOT01\", \"01-701-1035\", \"OVR\",    \"PR\",   \"2016-06-25\", \"Y\",   \"CDISCPILOT01\", \"01-701-1035\", \"BOR\",    \"PR\",   \"2016-06-25\", \"Y\" ) %>% mutate(   ADT = as_date(ADT) )  pd <- date_source(   dataset_name = \"adrs\",   date = ADT,   filter = PARAMCD == \"OVR\" & ANL01FL == \"Y\" & AVALC == \"PD\" )  filter_pd(   dataset = adrs,   filter = PARAMCD == \"OVR\" & ANL01FL == \"Y\",   source_pd = pd,   source_datasets = list(adrs = adrs) ) #> # A tibble: 6 x 6 #>   STUDYID      USUBJID     PARAMCD AVALC ADT        ANL01FL #>   <chr>        <chr>       <chr>   <chr> <date>     <chr>   #> 1 CDISCPILOT01 01-701-1015 OVR     CR    2016-01-25 Y       #> 2 CDISCPILOT01 01-701-1015 OVR     PD    2016-02-22 Y       #> 3 CDISCPILOT01 01-701-1034 OVR     SD    2015-12-07 Y       #> 4 CDISCPILOT01 01-701-1034 OVR     PD    2016-04-25 Y       #> 5 CDISCPILOT01 01-701-1035 OVR     SD    2016-04-25 Y       #> 6 CDISCPILOT01 01-701-1035 OVR     PR    2016-06-25 Y"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/get_crpr_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Get CR Records Followed by PR That Lead to a Prior Error — get_crpr_dataset","title":"Get CR Records Followed by PR That Lead to a Prior Error — get_crpr_dataset","text":"Get CR Records Followed PR Lead Prior Error","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/get_crpr_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get CR Records Followed by PR That Lead to a Prior Error — get_crpr_dataset","text":"","code":"get_crpr_dataset()"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/get_crpr_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get CR Records Followed by PR That Lead to a Prior Error — get_crpr_dataset","text":"data.frame NULL","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/get_crpr_dataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get CR Records Followed by PR That Lead to a Prior Error — get_crpr_dataset","text":"admiralonco function check source records CR followed PR throw error otherwise. get_crpr_dataset() function allows one retrieve duplicate records lead error. Note function always returns dataset duplicates last error thrown current R session. Thus, restarting R sessions get_crpr_dataset() return NULL second error thrown, dataset first error can longer accessed (unless saved variable).","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/get_crpr_dataset.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get CR Records Followed by PR That Lead to a Prior Error — get_crpr_dataset","text":"Stefan Bundfuss","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/get_crpr_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get CR Records Followed by PR That Lead to a Prior Error — get_crpr_dataset","text":"","code":"library(tibble) library(dplyr) library(lubridate) library(admiralonco)  adrs <- tribble(   ~USUBJID, ~ADTC,        ~AVALC,   \"1\",      \"2020-01-01\", \"PR\",   \"1\",      \"2020-02-01\", \"CR\",   \"1\",      \"2020-02-16\", \"NE\",   \"1\",      \"2020-03-01\", \"CR\",   \"2\",      \"2020-02-06\", \"PR\",   \"2\",      \"2020-02-16\", \"CR\",   \"2\",      \"2020-03-30\", \"PR\", ) %>%   mutate(     ADT = ymd(ADTC),     STUDYID = \"XX1234\"   )  signal_crpr(adrs, order = vars(ADT)) #> Warning: Dataset contains CR records followed by PR. #> Run `get_crpr_dataset()` to access the CR records records followed by PR  get_crpr_dataset() #> # A tibble: 2 x 5 #>   USUBJID ADTC       AVALC ADT        STUDYID #>   <chr>   <chr>      <chr> <date>     <chr>   #> 1 2       2020-02-16 CR    2020-02-16 XX1234  #> 2 2       2020-03-30 PR    2020-03-30 XX1234"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/signal_crpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Signal CR Records Followed by PR — signal_crpr","title":"Signal CR Records Followed by PR — signal_crpr","text":"Signal CR Records Followed PR","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/signal_crpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signal CR Records Followed by PR — signal_crpr","text":"","code":"signal_crpr(   dataset,   order,   msg = \"Dataset contains CR records followed by PR.\",   subject_keys = vars(STUDYID, USUBJID),   check_type = \"warning\" )"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/signal_crpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Signal CR Records Followed by PR — signal_crpr","text":"dataset data frame order list variables created using vars() determining order records msg condition message subject_keys Variables uniquely identify subject list symbols created using vars() expected. check_type Type message issue detecting PR CR. Default: \"warning\" Permitted Values: \"warning\" \"error\"","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/signal_crpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Signal CR Records Followed by PR — signal_crpr","text":"return value, called side effects","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/signal_crpr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Signal CR Records Followed by PR — signal_crpr","text":"Stefan Bundfuss","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/signal_crpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Signal CR Records Followed by PR — signal_crpr","text":"","code":"library(tibble) library(dplyr) library(lubridate) library(admiralonco)  adrs <- tribble(   ~USUBJID, ~ADTC,        ~AVALC,   \"1\",      \"2020-01-01\", \"PR\",   \"1\",      \"2020-02-01\", \"CR\",   \"1\",      \"2020-02-16\", \"NE\",   \"1\",      \"2020-03-01\", \"CR\",   \"2\",      \"2020-02-06\", \"PR\",   \"2\",      \"2020-02-16\", \"CR\",   \"2\",      \"2020-03-30\", \"PR\", ) %>%   mutate(     ADT = ymd(ADTC),     STUDYID = \"XX1234\"   )  signal_crpr(adrs, order = vars(ADT)) #> Warning: Dataset contains CR records followed by PR. #> Run `get_crpr_dataset()` to access the CR records records followed by PR"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/tte_source_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-Defined Time-to-Event Source Objects — death_event","title":"Pre-Defined Time-to-Event Source Objects — death_event","text":"pre-defined tte_source objects can used input admiral::derive_param_tte().","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/tte_source_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-Defined Time-to-Event Source Objects — death_event","text":"","code":"death_event  lastalive_censor  pd_event  lasta_censor  rand_censor  trts_censor"},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/tte_source_objects.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pre-Defined Time-to-Event Source Objects — death_event","text":"object class censor_source (inherits tte_source, source, list) length 5. object class event_source (inherits tte_source, source, list) length 5. object class censor_source (inherits tte_source, source, list) length 5. object class censor_source (inherits tte_source, source, list) length 5. object class censor_source (inherits tte_source, source, list) length 5.","code":""},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/tte_source_objects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pre-Defined Time-to-Event Source Objects — death_event","text":"see definition various objects simply print object R console, e.g. print(death_event). details use objects please refer admiral::derive_param_tte(). Printing object display input dataset_name, filter (applicable), date variable, appropriate values EVNTDESC, CNSDTDSC, SRCDOM, SRCVAR, SRCSEQ.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralonco/devel/reference/tte_source_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pre-Defined Time-to-Event Source Objects — death_event","text":"","code":"# This shows the definition of all pre-defined `tte_source` objects that ship # with {admiralonco} for (obj in admiral::list_tte_source_objects(package = \"admiralonco\")$object) {   cat(obj, \"\\n\")   print(get(obj))   cat(\"\\n\") } #> lasta_censor  #> <tte_source> object #> dataset_name: \"adrs\" #> filter: PARAMCD == \"LSTA\" & ANL01FL == \"Y\" #> date: ADT #> censor: 1 #> set_values_to: #>   EVNTDESC: \"Last Tumor Assessment\" #>   CNSDTDSC: \"Last Tumor Assessment\" #>   SRCDOM: \"ADRS\" #>   SRCVAR: \"ADT\" #>   SRCSEQ: ASEQ #>  #> trts_censor  #> <tte_source> object #> dataset_name: \"adsl\" #> filter: NULL #> date: TRTSDT #> censor: 1 #> set_values_to: #>   EVNTDESC: \"Treatment Start\" #>   CNSDTDSC: \"Treatment Start\" #>   SRCDOM: \"ADSL\" #>   SRCVAR: \"TRTSDT\" #>  #> rand_censor  #> <tte_source> object #> dataset_name: \"adsl\" #> filter: NULL #> date: RANDDT #> censor: 1 #> set_values_to: #>   EVNTDESC: \"Randomization\" #>   CNSDTDSC: \"Randomization\" #>   SRCDOM: \"ADSL\" #>   SRCVAR: \"RANDDT\" #>  #> lastalive_censor  #> <tte_source> object #> dataset_name: \"adsl\" #> filter: NULL #> date: LSTALVDT #> censor: 1 #> set_values_to: #>   EVNTDESC: \"ALIVE\" #>   SRCDOM: \"ADSL\" #>   SRCVAR: \"LSTALVDT\" #>  #> death_event  #> <tte_source> object #> dataset_name: \"adsl\" #> filter: DTHFL == \"Y\" #> date: DTHDT #> censor: 0 #> set_values_to: #>   EVNTDESC: \"DEATH\" #>   SRCDOM: \"ADSL\" #>   SRCVAR: \"DTHDT\" #>  #> pd_event  #> <tte_source> object #> dataset_name: \"adrs\" #> filter: PARAMCD == \"PD\" & AVALC == \"Y\" & ANL01FL == \"Y\" #> date: ADT #> censor: 0 #> set_values_to: #>   EVNTDESC: \"Disease Progression\" #>   SRCDOM: \"ADRS\" #>   SRCVAR: \"ADT\" #>   SRCSEQ: ASEQ #>"}]
